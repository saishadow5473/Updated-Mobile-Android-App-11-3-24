// To parse this JSON data, do
//
//     final freeConsultation = freeConsultationFromJson(jsonString);

import 'package:meta/meta.dart';
import 'dart:convert';

FreeConsultation freeConsultationFromJson(String str) =>
    FreeConsultation.fromJson(json.decode(str));

String freeConsultationToJson(FreeConsultation data) => json.encode(data.toJson());

class FreeConsultation {
  FreeConsultation(
      {@required this.userIhlId,
      @required this.consultantName,
      @required this.vendorConsultantId,
      @required this.ihlConsultantId,
      @required this.vendorId,
      @required this.specality,
      @required this.modeOfPayment,
      @required this.alergy,
      @required this.kioskCheckinHistory,
      @required this.appointmentStartTime,
      @required this.appointmentEndTime,
      @required this.appointmentDuration,
      @required this.appointmentStatus,
      @required this.vendorName,
      @required this.appointmentModel,
      @required this.reasonForVisit,
      @required this.documentId,
      @required this.directCall,
      @required this.paymentFor,
      @required this.mobileNumber,
      @required this.purposeDetails,
      @required this.affiliationUniqueName,
      @required this.userMobileNumber,
      @required this.userEmail,
      @required this.sourceDevice,
      @required this.serviceProvided,
      @required this.date,
      @required this.time,
      @required this.usageType,
      @required this.purpose,
      @required this.paymentStatus,
      @required this.accountName,
      @required this.serviceProvidedDate,
      this.consultationFees});

  String userIhlId,
      consultantName,
      vendorConsultantId,
      ihlConsultantId,
      vendorId,
      specality,
      modeOfPayment,
      callStatus = '',
      alergy,
      kioskId = '',
      appointmentStartTime,
      appointmentEndTime,
      appointmentDuration,
      appointmentStatus,
      vendorName,
      appointmentModel,
      reasonForVisit,
      notes = '',
      bookedDateTime = '',
      consultantType = '',
      paymentFor,
      mobileNumber,
      mrpCost = 'FREE',
      totalAmount = '0',
      discounts = '',
      className = '',
      purposeDetails,
      kioskPurposeDetails = '',
      affiliationUniqueName,
      organizationUniqueName = '',
      organizationCode = '',
      discountType = '',
      couponNumber = '',
      userMobileNumber,
      userEmail,
      sourceDevice,
      serviceProvided,
      prescriptionPrint = '',
      status = '',
      approvalCode = '',
      applicationId = '',
      batchNumber = '',
      billNumber = '',
      cardNumber = '',
      cardType = '',
      cid = '',
      currency = '',
      date,
      invoiceNumber = '',
      merchantId = '',
      retrievalReferenceNumber = '',
      stan = '',
      statusCode = '',
      terminalId = '',
      time,
      transactionId = '',
      transactionMode = '',
      tsi = '',
      tvr = '',
      usageType,
      mosambeeTransactionId = '',
      razorpayQrCodeId = '',
      razorpayQrPaymentIds = '',
      razorpayQrPaymentStatus = '',
      purpose,
      razorpayOrderId = '',
      razorpayPaymentId = '',
      razorpaySignature = '',
      paymentStatus,
      refundInitiated = '',
      accountName,
      serviceProvidedDate,
      isNotIhlBillable = '';
  Map lastCheckinServices = {}, kioskCheckinHistory;
  String consultationFees = "0";
  int freeConsultationTotalAmount = 0;
  bool directCall;
  List documentId;

  factory FreeConsultation.fromJson(Map<String, dynamic> json) => FreeConsultation(
        userIhlId: json["user_ihl_id"],
        consultantName: json["consultant_name"],
        vendorConsultantId: json["vendor_consultant_id"],
        ihlConsultantId: json["ihl_consultant_id"],
        vendorId: json["vendor_id"],
        specality: json["specality"],
        modeOfPayment: json["mode_of_payment"],
        alergy: json["alergy"],
        kioskCheckinHistory: json["kiosk_checkin_history"],
        appointmentStartTime: json["appointment_start_time"],
        appointmentEndTime: json["appointment_end_time"],
        appointmentDuration: json["appointment_duration"],
        appointmentStatus: json["appointment_status"],
        vendorName: json["vendor_name"],
        appointmentModel: json["appointment_model"],
        reasonForVisit: json["reason_for_visit"],
        documentId: json["document_id"],
        directCall: json["direct_call"],
        paymentFor: json["payment_for"],
        mobileNumber: json["MobileNumber"],
        purposeDetails: json["PurposeDetails"],
        affiliationUniqueName: json["affiliation_unique_name"],
        userMobileNumber: json["user_mobile_number"],
        userEmail: json["user_email"],
        sourceDevice: json["SourceDevice"],
        serviceProvided: json["Service_Provided"],
        date: json["date"],
        time: json["time"],
        usageType: json["UsageType"],
        purpose: json["purpose"],
        paymentStatus: json["payment_status"],
        accountName: json["account_name"],
        serviceProvidedDate: json["service_provided_date"],
      );

  Map<String, dynamic> toJson() => {
        "user_ihl_id": userIhlId,
        "consultant_name": consultantName,
        "vendor_consultant_id": vendorConsultantId,
        "ihl_consultant_id": ihlConsultantId,
        "vendor_id": vendorId,
        "specality": specality,
        "consultation_fees": consultationFees,
        "mode_of_payment": modeOfPayment,
        "call_status": callStatus,
        "alergy": alergy,
        "kiosk_id": kioskId,
        "kiosk_checkin_history": kioskCheckinHistory,
        "appointment_start_time": appointmentStartTime,
        "appointment_end_time": appointmentEndTime,
        "appointment_duration": appointmentDuration,
        "appointment_status": appointmentStatus,
        "vendor_name": vendorName,
        "appointment_model": appointmentModel,
        "reason_for_visit": reasonForVisit,
        "notes": notes,
        "document_id": documentId,
        "direct_call": directCall,
        "booked_date_time": bookedDateTime,
        "consultant_type": consultantType,
        "total_amount": freeConsultationTotalAmount,
        "payment_for": paymentFor,
        "MobileNumber": mobileNumber,
        "MRPCost": mrpCost,
        "TotalAmount": totalAmount,
        "Discounts": discounts,
        "ClassName": className,
        "PurposeDetails": purposeDetails,
        "Kiosk_purpose_details": kioskPurposeDetails,
        "affiliation_unique_name": affiliationUniqueName,
        "OrganizationUniqueName": organizationUniqueName,
        "OrganizationCode": organizationCode,
        "last_checkin_services": lastCheckinServices,
        "DiscountType": discountType,
        "CouponNumber": couponNumber,
        "user_mobile_number": userMobileNumber,
        "user_email": userEmail,
        "SourceDevice": sourceDevice,
        "Service_Provided": serviceProvided,
        "prescription_print": prescriptionPrint,
        "Status": status,
        "approvalCode": approvalCode,
        "applicationId": applicationId,
        "batchNumber": batchNumber,
        "billNumber": billNumber,
        "cardNumber": cardNumber,
        "cardType": cardType,
        "cid": cid,
        "currency": currency,
        "date": date,
        "invoiceNumber": invoiceNumber,
        "merchantId": merchantId,
        "retrievalReferenceNumber": retrievalReferenceNumber,
        "Stan": stan,
        "statusCode": statusCode,
        "terminalId": terminalId,
        "time": time,
        "transactionId": transactionId,
        "transactionMode": transactionMode,
        "tsi": tsi,
        "tvr": tvr,
        "UsageType": usageType,
        "mosambee_transaction_id": mosambeeTransactionId,
        "razorpay_qr_code_id": razorpayQrCodeId,
        "razorpay_qr_payment_ids": razorpayQrPaymentIds,
        "razorpay_qr_payment_status": razorpayQrPaymentStatus,
        "purpose": purpose,
        "razorpay_order_id": razorpayOrderId,
        "razorpay_payment_id": razorpayPaymentId,
        "razorpay_signature": razorpaySignature,
        "payment_status": paymentStatus,
        "refund_initiated": refundInitiated,
        "account_name": accountName,
        "service_provided_date": serviceProvidedDate,
        "isNotIhlBillable": isNotIhlBillable,
      };
}
