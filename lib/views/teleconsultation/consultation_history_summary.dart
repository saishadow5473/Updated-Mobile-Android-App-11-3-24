// ignore_for_file: unused_import, unused_local_variable, unused_field, camel_case_types, missing_return, unnecessary_statements, non_constant_identifier_names
import 'dart:convert';
import 'dart:developer';
import 'dart:io';
import 'dart:isolate';
import 'dart:ui';

import 'package:crypto/crypto.dart';
import 'package:device_info_plus/device_info_plus.dart';
// //import 'package:awesome_notifications/awesome_notifications.dart';

import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_downloader/flutter_downloader.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:ihl/constants/api.dart';
import 'package:ihl/constants/spKeys.dart';
import 'package:ihl/models/surveyQuestion.dart';
import 'package:ihl/new_design/presentation/pages/home/landingPage.dart';
import 'package:ihl/repositories/api_consult.dart';
import 'package:ihl/utils/app_colors.dart';
import 'package:ihl/utils/commonUi.dart';
import 'package:ihl/utils/screenutil.dart';
import 'package:ihl/views/home_screen.dart';
import 'package:ihl/views/teleconsultation/videocall/genix_lab_order_pdf.dart';
import 'package:ihl/views/teleconsultation/videocall/genix_prescription.dart';
import 'package:ihl/views/teleconsultation/view_consultation_instructions.dart';
import 'package:ihl/views/view_past_bill/view_only_bill.dart';
import 'package:ihl/widgets/ScrollessBasicPageUI.dart';
import 'package:ihl/widgets/policyDialog.dart';
import 'package:intl/intl.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:responsive_sizer/responsive_sizer.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:strings/strings.dart';

import '../../models/data_helper.dart';
import '../../models/invoice.dart';
import '../../new_design/presentation/pages/home/home_view.dart';
import '../../repositories/api_repository.dart';
import 'files/file_resuable_snackbar.dart';
import 'files/medicalFiles.dart';
import 'files/pdf_viewer.dart';

class ConsultationHistorySummary extends StatefulWidget {
  final appointmentId;

  final isNotification;
  ConsultationHistorySummary({
    Key key,
    this.appointmentId,
    this.isNotification,
  }) : super(key: key);

  @override
  _Tab1State createState() => _Tab1State();
}

class _Tab1State extends State<ConsultationHistorySummary> {
  String _imageBase64 =
      '';
  // '';
  http.Client _client = http.Client();
  bool loading = true;
  bool failed = false;
  Map consultationDetails;
  var consultantName,
      consultantMobile,
      consultantEmail,
      _userDetail,
      consultantEducation,
      consultantDescription,
      speciality,
      reasonOfVisit,
      appStartingTime,
      appEndTime,
      consultationFees,
      modeOfPayment,
      appointmentModel,
      allergy,
      _allergies,
      _prescriptionNotes,
      instruction,
      diagnosis,
      adviceNotes,
      appointmentDuration,
      appointmentStatus,
      callStatus,
      vendorName,
      affiliation_unique_name,
      _labNotes,
      _radiologyNotes;
  Invoice invoice;
  var prescription;
  var labTestList;
  var notes;
  String labNotes;
  var genixRadiology;
  var genixDiagnosis;
  var kisokCheckinHistory;
  var ihlConsultantId;
  var rmpId;
  var consultantAddress;
  var accountId;
  var logoUrl;
  var isAgree = false;
  var appointmentStartingTime;
  var appointmentEndingTime;
  bool isNotification = false;
  var consultantSignature;
  var base64Signature;
  var dummy = [
    {
      "drug_name": "Dolo 650",
      "quantity": "2",
      "SIG": "1-1-2-2",
      "days": "3",
      "direction_of_use": "AfterFood"
    },
  ];
  var dummmyMedFiles = ["c955961253774b74adf0574d0b04aa4d", "f3263f06acb74362b6949553cee0589d"];
  var medFiles = [];
  String firstName,
      lastName,
      email,
      mobileNumber,
      age,
      gender,
      finalGender,
      weight,
      address,
      pincode,
      area,
      state,
      city;

  var bmi, footerDetail;
  int finalAge;
  var ihlUserId;
  var invoiceNumber;
  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();
// https://testserver
// https://testserver
// ://azureapi
// ://testserver
  getUserDetails() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    var data = prefs.get(SPKeys.userData);
    data = data == null || data == '' ? '{"User":{}}' : data;

    Map res = jsonDecode(data);
    firstName = res['User']['firstName'];
    ihlUserId = res['User']['id'];
    lastName = res['User']['lastName'];
    firstName ??= "";
    lastName ??= "";
    email = res['User']['email'];
    mobileNumber = res['User']['mobileNumber'];
    age = res['User']['dateOfBirth'];
    address = res['User']['address'].toString();
    address = address == 'null' ? '' : address;
    area = res['User']['area'].toString();
    area = area == 'null' ? '' : area;
    city = res['User']['city'].toString();
    city = city == 'null' ? '' : city;
    state = res['User']['state'].toString();
    state = state == 'null' ? '' : state;
    pincode = res['User']['pincode'].toString();
    pincode = pincode == 'null' ? '' : pincode;
    gender = res['User']['gender'];
    if (gender == "m" || gender == "M" || gender == "male" || gender == "Male") {
      finalGender = "Male";
    } else {
      finalGender = "Female";
    }
    age = age.replaceAll(" ", "");
    if (age.contains("-")) {
      DateTime tempDate = new DateFormat("dd-MM-yyyy").parse(age);
      DateTime currentDate = DateTime.now();
      finalAge = currentDate.year - tempDate.year;
    } else if (age.contains("/")) {
      DateTime tempDate = new DateFormat("MM/dd/yyyy").parse(age.trim());
      DateTime currentDate = DateTime.now();
      finalAge = currentDate.year - tempDate.year;
    }

    if (res.containsKey('LastCheckin')) {
      if (res['LastCheckin'].containsKey('bmi') || res['LastCheckin'].containsKey('bmi')) {
        weight = res['LastCheckin']['weightKG'].toStringAsFixed(2);
        bmi = res['LastCheckin']['bmi'].toStringAsFixed(2);
      }
    } else {
      weight = null;
      bmi = null;
    }
    if (weight != null && weight != '') {
      null;
    } else {
      var raw = prefs.get(SPKeys.userData);
      if (raw == '' || raw == null) {
        raw = '{}';
      }
      Map data = jsonDecode(raw);

      Map user = data['User'];
      if (user == null) {
        user = {};
      }

      /// calculate bmi🎇🎇
      int calcBmi({height, weight}) {
        double parsedH;
        double parsedW;
        if (height != null && weight != null && height != '' && weight != '') {
          parsedH = double.tryParse(height.toString());
          parsedW = double.tryParse(weight.toString());
        }
        if (parsedH != null && parsedW != null) {
          int bmi = parsedW ~/ (parsedH * parsedH);

          return bmi;
        }
        return null;
      }
      //get inputted height weight if values are not available

      weight = user['userInputWeightInKG'];

      var height = user['heightMeters'];

      //Calculate bmi

      bmi = calcBmi(height: height, weight: weight);

      // bmi = bmiClassCalc(userVitals[0]['bmi']);
    }
    print(ihlUserId);
    invoice = await ConsultApi().getInvoiceNumber(ihlUserId, widget.appointmentId);
    print(invoiceNumber);
    // SharedPreferences pref = await SharedPreferences.getInstance();
    invoiceNumber = prefs.getString('invoice');
    log('invoice ${invoiceNumber.toString()}');
  }

  sha256_hash(data) {
    List<int> bytes = utf8.encode(data);
    String hash = sha256.convert(bytes).toString();
    // assert(hash == 'ab530a13e45914982b79f9b7e3fba994cfd1f3fb22f71cea1afbf02b460c6d1d');  // true
    return hash;
  }

  sendPrescriptionTo1MG() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    Get.snackbar(
      'Sending Prescription',
      'Please wait',
      margin: EdgeInsets.only(top: 20, left: 20, right: 20),
      backgroundColor: AppColors.primaryAccentColor,
      colorText: Colors.white,
      duration: Duration(seconds: 10),
    );
    prefs.setString("useraddressFromHistory", address);
    prefs.setString("userareaFromHistory", area);
    prefs.setString("usercityFromHistory", city);
    prefs.setString("userstateFromHistory", state);
    prefs.setString("userpincodeFromHistory", pincode);
    var prescription_base64 = await genixPrescription(
      context: context,
      showPdfNotification: false,
      mobilenummber: mobileNumber,
      footer: footerDetail,
      prescription: prescription,
      appointmentId: widget.appointmentId,
      prescriptionNotes: _prescriptionNotes,
      bmi: bmi,
      allergies: _allergies,
      weight: weight,
      rmpid: rmpId,
      notes: notes,
      allergy: allergy,
      consultantSignature: consultantSignature,
      genixDaignosis: genixDiagnosis,
      genixRadiology: genixRadiology,
      kisokCheckinHistory: kisokCheckinHistory,
      genixLabTest: labTestList,
      genixLabNotes: labNotes,
      consultantAddress: consultantAddress,
      specality: speciality,
      logoUrl: Image.memory(base64Decode(_imageBase64)),
      // logoUrl: logoUrl,
    );
    String salt = "f1nd1ngn3m0";
    // String data_to_find_hash = 'thamarais16@gmail.com' + '9894599498' + salt;
    String data_to_find_hash = '$email' + '$mobileNumber' + salt;
    String calculated_hash = sha256_hash(data_to_find_hash);

    // var jsontext ='{"first_name":"Thamarai","last_name":"Selvan","email":"thamarais16@gmail.com","mobile":"9894599498","prescription_number":"IHL-21-22/0000000001","prescription_base64":"eyJkcnVnX25hbWUiOiJQYXJhY2V0YW1vbCAyNTBtZy81bWwgU3lydXAiLCJkb3NhZ2UiOjEyLCJ1bml0cyI6Ik1MIiwic3RyZW5ndGgiOiIyNTBtZy81bWwiLCJmcmVxdWVuY3kiOiJPbmNlIGluIHRoZSB3ZWVrIiwid2hlblRvVGFrZSI6Ik4vQSIsIm5vdGVzIjoiIiwic3RhcnREYXRlIjoxNjA1NDY1MDAwLCJlbmREYXRlIjoxNjA1NTUxMzk5fQ==","security_hash":"5f51981aaf6539d3adfac598c9edde9bdd02bcbfcc47ed813a65dc7e12058948"}';
    var jsontext =
        '{"first_name":"$firstName","last_name":"$lastName","email":"$email","mobile":"$mobileNumber","prescription_number":"IHL-21-22/0000000001","prescription_base64":"$prescription_base64","security_hash":"$calculated_hash","affiliation_unique_name":"$affiliation_unique_name",' // find the affiliation code
        '"order_type":"medication"}';
    final response = await _client.post(
      Uri.parse(API.iHLUrl + "/login/sendPrescription"),
      body: jsontext,
    );
    if (response.statusCode == 200) {
      Get.close(1);
      print(response.body);
      Get.snackbar(
        'Prescription Sent!',
        'You will get Confirmation call before your medicine is dispatched',
        margin: EdgeInsets.only(top: 20, left: 20, right: 20),
        backgroundColor: Colors.green,
        colorText: Colors.white,
        mainButton: TextButton(
            child: Text(
              'Close',
              style: TextStyle(color: Colors.white),
            ),
            onPressed: () => Get.close(1)),
        duration: Duration(seconds: 10),
      );
    } else {
      Get.close(1);
      print(response.body);
      Get.snackbar(
        'Prescription not sent!',
        'Some error occured while sending. Try again!',
        margin: EdgeInsets.only(top: 20, left: 20, right: 20),
        backgroundColor: Colors.red,
        colorText: Colors.white,
        mainButton: TextButton(
            child: Text(
              'Close',
              style: TextStyle(color: Colors.white),
            ),
            onPressed: () => Get.close(1)),
        duration: Duration(seconds: 10),
      );
    }
  }

  sendLabTestTo1MG() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    Get.snackbar(
      'Sending LabTests',
      'Please wait',
      margin: EdgeInsets.only(top: 20, left: 20, right: 20),
      backgroundColor: AppColors.primaryAccentColor,
      colorText: Colors.white,
      duration: Duration(seconds: 10),
    );
    prefs.setString("useraddressFromHistory", address);
    prefs.setString("userareaFromHistory", area);
    prefs.setString("usercityFromHistory", city);
    prefs.setString("userstateFromHistory", state);
    prefs.setString("userpincodeFromHistory", pincode);
    var labTest_base64 = await genixLabOrder(
        context, false, labTestList, bmi, weight, rmpId, labNotes, consultantSignature);
    String salt = "f1nd1ngn3m0";
    // String data_to_find_hash = 'thamarais16@gmail.com' + '9894599498' + salt;
    String data_to_find_hash = '$email' + '$mobileNumber' + salt;
    String calculated_hash = sha256_hash(data_to_find_hash);

    // var jsontext ='{"first_name":"Thamarai","last_name":"Selvan","email":"thamarais16@gmail.com","mobile":"9894599498","prescription_number":"IHL-21-22/0000000001","prescription_base64":"eyJkcnVnX25hbWUiOiJQYXJhY2V0YW1vbCAyNTBtZy81bWwgU3lydXAiLCJkb3NhZ2UiOjEyLCJ1bml0cyI6Ik1MIiwic3RyZW5ndGgiOiIyNTBtZy81bWwiLCJmcmVxdWVuY3kiOiJPbmNlIGluIHRoZSB3ZWVrIiwid2hlblRvVGFrZSI6Ik4vQSIsIm5vdGVzIjoiIiwic3RhcnREYXRlIjoxNjA1NDY1MDAwLCJlbmREYXRlIjoxNjA1NTUxMzk5fQ==","security_hash":"5f51981aaf6539d3adfac598c9edde9bdd02bcbfcc47ed813a65dc7e12058948"}';
    var jsontext =
        '{"first_name":"$firstName","last_name":"$lastName","email":"$email","mobile":"$mobileNumber","prescription_number":"IHL-21-22/0000000001","prescription_base64":"$labTest_base64","security_hash":"$calculated_hash","affiliation_unique_name":"$affiliation_unique_name",' // the
        '"order_type":"lab"}';
    final response = await _client.post(
      Uri.parse(API.iHLUrl + "/login/sendPrescription"),
      body: jsontext,
    );
    if (response.statusCode == 200) {
      Get.close(1);
      print(response.body);
      Get.snackbar(
        'LabTests Sent!',
        'You will get Confirmation call',
        margin: EdgeInsets.only(top: 20, left: 20, right: 20),
        backgroundColor: Colors.green,
        colorText: Colors.white,
        mainButton: TextButton(
            child: Text(
              'Close',
              style: TextStyle(color: Colors.white),
            ),
            onPressed: () => Get.close(1)),
        duration: Duration(seconds: 10),
      );
    } else {
      Get.close(1);
      print(response.body);
      Get.snackbar(
        'LabTests not sent!',
        'Some error occured while sending. Try again!',
        margin: EdgeInsets.only(top: 20, left: 20, right: 20),
        backgroundColor: Colors.red,
        colorText: Colors.white,
        mainButton: TextButton(
            child: Text(
              'Close',
              style: TextStyle(color: Colors.white),
            ),
            onPressed: () => Get.close(1)),
        duration: Duration(seconds: 10),
      );
    }
  }

  int progress = 0;

  ReceivePort _receivePort = ReceivePort();

  static downloadingCallback(id, status, progress) {
    ///Looking up for a send port
    SendPort sendPort = IsolateNameServer.lookupPortByName("downloading");

    ///ssending the data
    sendPort.send([id, status, progress]);
  }

  @override
  void initState() {
    super.initState();
    getUserDetails();
    appointmentDetails(widget.appointmentId);

    isNotification = widget.isNotification == null ? false : widget.isNotification;

    ///register a send port for the other isolates
    IsolateNameServer.registerPortWithName(_receivePort.sendPort, "downloading");

    ///Listening for the data is comming other isolataes
    _receivePort.listen((message) {
      if (this.mounted) {
        setState(() {
          progress = message[2];
        });
      }

      print(progress);
    });

    FlutterDownloader.registerCallback(downloadingCallback);
  }

  Future getSignature() async {
    final signatureResponse = await _client.get(
      Uri.parse(API.iHLUrl + '/consult/getGenixDoctorSign?ihl_consultant_id=' + ihlConsultantId),
      // '355b25949ed8405dba88c07e9705082a'
    );

    if (signatureResponse.statusCode == 200) {
      base64Signature = signatureResponse.body;

      base64Signature = base64Signature.replaceAll('&quot;', '');
      base64Signature = base64Signature.replaceAll('{ContentType:image/png,Content:', '');
      base64Signature = base64Signature.replaceAll('{ContentType:image/jpeg,Content:', '');
      base64Signature = base64Signature.replaceAll('}', '');
      base64Signature = base64Signature.replaceAll('{', '');
      base64Signature = base64Signature.replaceAll('"', '');
      if (base64Signature.contains('error')) {
      } else {
        if (base64Signature.length == 0) {
        } else {
          var _temSig =
              '';
          try {
            consultantSignature = Image.memory(base64Decode(base64Signature));
          } catch (e) {}
        }
      }
      //getPlatformData();
    } else {
      print('signatureAPI else part => ${signatureResponse.body}');
    }
  }

  Future getLogoUrl(accId) async {
    // accId = '499935c5-01a7-4b39-b7e2-bf08b5e787eb';
    final logoUrlResponse = await _client.get(
      Uri.parse(API.iHLUrl + "/consult/get_logo_url?accountId=$accId"),
    );
    try {
      if (accId == '499935c5-01a7-4b39-b7e2-bf08b5e787eb') {
        footerDetail = {
          'Description': 'Please note the Emergency Helpline Numbers of Dr Mehta\'s Hospital',
          'line1': 'Chennai: Chetpet Unit: 044-40054005',
          'line2': 'Global Campus @ Velappanchavadi : 044-40474047'
        };
      }
      if (logoUrlResponse.statusCode == 200) {
        var res = jsonDecode(logoUrlResponse.body);
        // logoUrl = res.toString();
        return res;
      } else {
        return '';
      }
    } catch (e) {
      print(e.toString());
      return '';
    }
  }

  Future getLogoForPrescriptionPDF(accId) async {
    // accId = '499935c5-01a7-4b39-b7e2-bf08b5e787eb';
    final logoUrlResponse = await _client.get(
      // Uri.parse(API.iHLUrl + "/consult/get_logo_url?accountId=$accId"),
      Uri.parse(API.iHLUrl + "/consult/genixAccountLogoFetch?accountid=$accId"),
      // Uri.parse(API.iHLUrl + "/consult/genixAccountLogoFetch?accountid=$accId"),
    );
    try {
      if (accId == '499935c5-01a7-4b39-b7e2-bf08b5e787eb') {
        footerDetail = {
          'Description': 'Please note the Emergency Helpline Numbers of Dr Mehta\'s Hospital',
          'line1': 'Chennai: Chetpet Unit: 044-40054005',
          'line2': 'Global Campus @ Velappanchavadi : 044-40474047'
        };
      } else {
        footerDetail = null;
      }
      if (logoUrlResponse.statusCode == 200) {
        var res = jsonDecode(logoUrlResponse.body);
        // logoUrl = res.toString();
        var r = res['logo_list'][0];
        String _base64Image = r.replaceAll('data:image/jpeg;base64,', '');
        _base64Image = _base64Image.replaceAll('}', '');
        _base64Image = _base64Image.replaceAll('data:image/jpegbase64,', '');
        return _base64Image;
      } else {
        return '';
      }
    } catch (e) {
      print(e.toString());
      return '';
    }
  }

  Future getPlatformData() async {
    final getPlatformData = await _client.post(
      Uri.parse(API.iHLUrl + "/consult/GetPlatfromData"),
      body: jsonEncode(<String, bool>{'cache': false}),
    );

    if (getPlatformData.statusCode == 200) {
      Map res = jsonDecode(getPlatformData.body);
      if (res['consult_type'] == null ||
          !(res['consult_type'] is List) ||
          res['consult_type'].isEmpty) {
        return;
      }
      if (mounted) {
        setState(() {
          loading = false;
        });
      }
      String type;
      if (vendorName == 'GENIX') {
        type = "Medical Consultation";
      } else {
        type = "Health Consultation";
      }
      var consultType =
          res['consult_type'].where((i) => i["consultation_type_name"] == type).toList();
      var spclty =
          consultType[0]["specality"].where((i) => i["specality_name"] == speciality).toList();
      var consultant = spclty != null
          ? spclty[0]['consultant_list']
              .where((i) => i['ihl_consultant_id'] == ihlConsultantId)
              .toList()
          : [];
      if (consultant.isNotEmpty) {
        rmpId = consultant[0]['RMP_ID'];
        accountId = consultant[0]['account_id'];
        consultantAddress = consultant[0]['consultant_address'];
        logoUrl = await getLogoUrl(accountId);
        logoUrl = logoUrl == 'invalid accountId' ||
                logoUrl == 'https://indiahealthlink.com/affiliate_logo/ihl-plus.png'
            ? 'https://dashboard.indiahealthlink.com/affiliate_logo/ihl-plus.png'
            : logoUrl;
        _imageBase64 = await getLogoForPrescriptionPDF(accountId);
        print(logoUrl);
        if (mounted)
          setState(() {
            logoUrl = logoUrl;
          });
      }
      print('rmpId == $rmpId');
    } else {
      print(getPlatformData.body);
    }
    //   final platformData = await SharedPreferences.getInstance();
    //  var getPlatformBody = await platformData.getString(SPKeys.platformData,);
  }

  reasonCut(value) {
    var lastStartIndex = 0;
    var lastEndIndex = 0;
    var reasonLastEndIndex = 0;
    var alergyLastEndIndex = 0;
    var notesLastEndIndex = 0;
    var directionOfUseLastEndIndex = 0;
    var dirOfUseLastEndIndex = 0;
    var drugNameLastEndIndex = 0;
    var reasonForVisit = [];
    for (int i = 0; i < value.length; i++) {
      if (value.contains("reason_for_visit")) {
        var start = ";appointment_id";
        var end = "vendor_appointment_id";
        var startIndex = value.indexOf(start, lastStartIndex);
        var endIndex = value.indexOf(end, lastEndIndex);
        lastStartIndex = value.indexOf(start, startIndex) + start.length;
        lastEndIndex = value.indexOf(end, endIndex) + end.length;

        String a = value.substring(startIndex + start.length, endIndex);
        var parseda1 = a.replaceAll('&quot', '');
        var parseda2 = parseda1.replaceAll(';:;', '');
        var parseda3 = parseda2.replaceAll(';,;', '');
//reason
        var reasonStart = "reason_for_visit";
        var reasonEnd = ";notes";
        var reasonStartIndex = value.indexOf(reasonStart);
        var reasonEndIndex = value.indexOf(reasonEnd, reasonLastEndIndex);
        reasonLastEndIndex = value.indexOf(reasonEnd, reasonLastEndIndex) + reasonEnd.length;
        String b = value.substring(reasonStartIndex + reasonStart.length, reasonEndIndex);
        var parsedb1 = b.replaceAll('&quot', '');
        var parsedb2 = parsedb1.replaceAll(';:;', '');
        var parsedb3 = parsedb2.replaceAll(';,', '');
        var temp1 = value.substring(0, reasonStartIndex);
        var temp2 = value.substring(reasonEndIndex, value.length);
        value = temp1 + temp2;
//alergy
        var alergyStart = "alergy";
        var alergyEnd = "appointment_start_time";
        var alergyStartIndex = value.indexOf(alergyStart);
        var alergyEndIndex = value.indexOf(alergyEnd, alergyLastEndIndex);
        alergyLastEndIndex = alergyEndIndex + alergyEnd.length;
        String c = value.substring(alergyStartIndex + alergyStart.length, alergyEndIndex);
        var parsedc1 = c.replaceAll('&quot;', '');
        var parsedc2 = parsedc1.replaceAll(':', '');
        var parsedc3 = parsedc2.replaceAll(',', '');
        temp1 = value.substring(0, alergyStartIndex);
        temp2 = value.substring(alergyEndIndex, value.length);
        value = temp1 + temp2;

//notes
        var notesStart = ";notes";
        var notesEnd = ";kiosk_checkin_history";
        var notesStartIndex = value.indexOf(notesStart);
        var notesEndIndex = value.indexOf(notesEnd, notesLastEndIndex);
        notesLastEndIndex = notesEndIndex + notesEnd.length;
        String d = value.substring(notesStartIndex + notesStart.length, notesEndIndex);
        var parsedd1 = d.replaceAll('&quot;', ' ');
        var parsedd2 = parsedd1.replaceAll(':', ' ');
        var parsedd3 = parsedd2.replaceAll(',', '');
        var parsedd4 = parsedd3.replaceAll('&quot', '');
        var parsedd5 = parsedd4.replaceAll('[{', '');
        var parsedd6 = parsedd5.replaceAll('\\\\n', '\n');
        var parsedd7 = parsedd6.replaceAll('\\', '');
        var parsedd8 = parsedd7.replaceAll('}]', '');
        var parsedd9 = parsedd8.replaceAll('}', '');
        var parsedd10 = parsedd9.replaceAll('{', '');
        var parsedd11 = parsedd10.replaceAll('&#39;', '');
        var parsedd12 = parsedd11.replaceAll('[', '');
        var parsedd13 = parsedd12.replaceAll(']', '');
        parsedd12 = parsedd13;
        temp1 = value.substring(0, notesStartIndex);
        temp2 = value.substring(notesEndIndex, value.length);
        value = temp1 + temp2;
        List descriptionList = [];
        for (int i = 0; i < parsedd12.length; i++) {
          if (parsedd12.contains("Description")) {
            var descriptionLastEndIndex = 0;
            var descriptionStart = "Description";
            var descriptionEnd = "Description";
            var descriptionStartIndex = parsedd12.indexOf(descriptionStart);
            descriptionLastEndIndex = descriptionStartIndex + descriptionStart.length;
            var descriptionEndIndex = parsedd12.indexOf(descriptionEnd, descriptionLastEndIndex);
            // descriptionLastEndIndex = descriptionEndIndex + descriptionEnd.length;
            String des = parsedd12.substring(descriptionStartIndex + descriptionStart.length,
                descriptionEndIndex != -1 ? descriptionEndIndex : parsedd12.length);
            temp1 = parsedd12.substring(0, descriptionStartIndex);
            temp2 = parsedd12.substring(
                descriptionEndIndex != -1 ? descriptionEndIndex : parsedd12.length,
                parsedd12.length);
            parsedd12 = temp1 + temp2;

            if (des.trim() == 'Notes from notes section' ||
                des.trim() == 'testing notes from the notes section' ||
                des.trim() == 'notes area test') {
              null;
            } else {
              descriptionList.add(des.trim());
            }
          } else {
            i = parsedd12.length;
          }
        }

//direction of use

        var directionOfUseStart = ";prescription";
        var directionOfUseEnd = ";lab_tests";
        var directionOfUseStartIndex = value.indexOf(directionOfUseStart);
        var directionOfUseEndIndex = value.indexOf(directionOfUseEnd, directionOfUseLastEndIndex);
        directionOfUseLastEndIndex = directionOfUseEndIndex + directionOfUseEnd.length;
        String prescrpton = value.substring(
            directionOfUseStartIndex + directionOfUseStart.length, directionOfUseEndIndex);
        var dirOfUseList = [];
        var drugNameList = [];
        for (int j = 0; j < prescrpton.length; j++) {
          if (prescrpton.contains("direction_of_use")) {
            var dirOfUseStart = ";direction_of_use";
            var dirOfUseEnd = ";SIG";
            var dirOfUseStartIndex = prescrpton.indexOf(dirOfUseStart);
            var dirOfUseEndIndex = prescrpton.indexOf(dirOfUseEnd, dirOfUseLastEndIndex);
            dirOfUseLastEndIndex = dirOfUseEndIndex + dirOfUseEnd.length;
            String e =
                prescrpton.substring(dirOfUseStartIndex + dirOfUseStart.length, dirOfUseEndIndex);
            var parsede1 = e.replaceAll('&quot;', ' ');
            var parsede2 = parsede1.replaceAll(':', ' ');
            var parsede3 = parsede2.replaceAll(',', '');
            var parsede4 = parsede3.replaceAll('&quot', '');
            var parsede5 = parsede4.replaceAll('[{', '');
            var parsede6 = parsede5.replaceAll('\\\\n', '\n');
            var parsede7 = parsede6.replaceAll('\\', '');
            var parsede8 = parsede7.replaceAll('}]', '');
            var parsede9 = parsede8.replaceAll('}', '');
            var parsede10 = parsede9.replaceAll('{', '');
            var parsede11 = parsede10.replaceAll('&#39;', '');
            var parsede12 = parsede11.replaceAll('[', '');
            var parsede13 = parsede12.replaceAll(']', '');
            parsede12 = parsede13;
            temp1 = prescrpton.substring(0, dirOfUseStartIndex);
            temp2 = prescrpton.substring(dirOfUseEndIndex, prescrpton.length);
            prescrpton = temp1 + temp2;

            dirOfUseList.add(parsede12.trim());
//drug name extraction
            var drugNameStart = ";drug_name";
            var drugNameEnd = ";quantity";
            var drugNameStartIndex = prescrpton.indexOf(drugNameStart);
            var drugNameEndIndex = prescrpton.indexOf(drugNameEnd, drugNameLastEndIndex);
            drugNameLastEndIndex = drugNameEndIndex + drugNameEnd.length;
            String f =
                prescrpton.substring(drugNameStartIndex + drugNameStart.length, drugNameEndIndex);

            var parsedf1 = f.replaceAll('&quot;', ' ');
            var parsedf2 = parsedf1.replaceAll(':', ' ');
            var parsedf3 = parsedf2.replaceAll(',', '');
            var parsedf4 = parsedf3.replaceAll('&quot', '');
            var parsedf5 = parsedf4.replaceAll('[{', '');
            var parsedf6 = parsedf5.replaceAll('\\\\n', '\n');
            var parsedf7 = parsedf6.replaceAll('\\', '');
            var parsedf8 = parsedf7.replaceAll('}]', '');
            var parsedf9 = parsedf8.replaceAll('}', '');
            var parsedf10 = parsedf9.replaceAll('{', '');
            var parsedf11 = parsedf10.replaceAll('&#39;', '');
            var parsedf12 = parsedf11.replaceAll('[', '');
            var parsedf13 = parsedf12.replaceAll(']', '');
            parsedf12 = parsedf13;
            temp1 = prescrpton.substring(0, drugNameStartIndex);
            temp2 = prescrpton.substring(drugNameEndIndex, prescrpton.length);
            prescrpton = temp1 + temp2;

            drugNameList.add(parsedf12.trim());
          } else {
            j = prescrpton.length;
          }
        }

        Map<String, dynamic> app = {};
        app['appointment_id'] = parseda3;
        app['reason_for_visit'] = parsedb3;
        app["alergy"] = parsedc3;
        app["notes"] = descriptionList;
        app['direction_of_use'] = dirOfUseList;
        app['drug_name'] = drugNameList;
        reasonForVisit.add(app);
      } else {
        i = value.length;
      }
    }

    return [value, reasonForVisit];
  }

  Future<Map> appointmentDetails(String appointmentID) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    var authToken = prefs.get('auth_token');
    var userData = prefs.get('data');
    var decodedResponse = jsonDecode(userData);
    String iHLUserToken = decodedResponse['Token'];
    try {
      // var response = await Dio().get(
      //     API.iHLUrl +
      //         '/consult/get_appointment_details?appointment_id=' +
      //         appointmentID,
      //     options: Options(headers: {
      //       'Content-Type': 'application/json',
      //       'ApiToken': authToken,
      //       'Token': iHLUserToken
      //     }));
      String iHLUrl = Apirepository().iHLUrl;
      String ihlToken = Apirepository().ihlToken;
      final auth_response = await _client
          .get(Uri.parse(iHLUrl + '/login/kioskLogin?id=2936'), headers: {'ApiToken': ihlToken});
      Signup reponseToken = Signup.fromJson(json.decode(auth_response.body));
      String apiToken = reponseToken.apiToken;
      final response = await _client.get(
          Uri.parse(API.iHLUrl +
              '/consult/get_appointment_details?appointment_id=' + //'f0c736db3e8b4e7893022a108e4a267b',
              // 'e36dfa358eef49889d6ac8bcd97bfce5',
              // "41be6a1e72ec4228b237033ac5dbf7dc",
              appointmentID),
          headers: {
            'Content-Type': 'application/json',
            'ApiToken': authToken != null ? authToken : apiToken,
            'Token': iHLUserToken
          });
      if (response.statusCode == 200) {
        if (response.body != '""') {
          String value = '';
          var reasonForVisit = [];
          List reas = reasonCut(response.body);
          value = reas[0];
          reasonForVisit = reas[1];
          var parsedString = value.replaceAll('&quot', '"');
          var parsedString2 = parsedString.replaceAll("\\\\\\", "");
          var parsedString3 = parsedString2.replaceAll("\\\\n", "\\n");
          var _p = parsedString3.replaceAll('\\\\', '');
          var parsedString4 = _p.replaceAll(";", "");
          var parsedString5 = parsedString4.replaceAll('""', '"');
          var parsedString6 = parsedString5.replaceAll('"[', '[');
          var parsedString7 = parsedString6.replaceAll(']"', ']');
          var pasrseString8 = parsedString7.replaceAll(':,', ':"",');
          var pasrseString9 = pasrseString8.replaceAll('"{', '{');
          var pasrseString10 = pasrseString9.replaceAll('}"', '}');
          var pasrseString11 = pasrseString10.replaceAll('}"', '}');
          var pasrseString12 = pasrseString11.replaceAll(':",', ':"",');
          var parseString13 = pasrseString12.replaceAll(':"}', ':""}');
          var finalOutput = parseString13.replaceAll('/"', '/');
          Map details = json.decode(finalOutput);
          for (int i = 0; i < reasonForVisit.length; i++) {
            details['message']['reason_for_visit'] = reasonForVisit[i]['reason_for_visit'];
            details['message']['alergy'] = reasonForVisit[i]['alergy'];
            details['message']['notes'] = reasonForVisit[i]['notes'];
            if (reasonForVisit[i]['direction_of_use'] != null &&
                reasonForVisit[i]['direction_of_use'].length > 0) {
              for (int j = 0; j < reasonForVisit[i]['direction_of_use'].length; j++) {
                details['message']['prescription'][j]['direction_of_use'] =
                    reasonForVisit[i]['direction_of_use'][j];
              }
            }
            if (reasonForVisit[i]['drug_name'] != null &&
                reasonForVisit[i]['drug_name'].length > 0) {
              for (int j = 0; j < reasonForVisit[i]['drug_name'].length; j++) {
                details['message']['prescription'][j]['drug_name'] =
                    reasonForVisit[i]['drug_name'][j];
              }
            }
          }
          if (this.mounted) {
            setState(() {
              // loading = false;
              consultationDetails = details;
              print(consultationDetails["message"]["alergy_genix"]);
              _allergies = consultationDetails["message"]["alergy_genix"] ?? 0;
              // print(_allergies.toString());
              _prescriptionNotes = consultationDetails["message"]["prescription"] != null &&
                      consultationDetails["message"]["prescription"].length > 0
                  ? consultationDetails["message"]["prescription"][0]["med_note"] ?? 'N/A'
                  : 'N/A';
              print('Prescription Notes :  $_prescriptionNotes');
              consultantName =
                  consultationDetails["consultant_details"]["consultant_name"].toString() ?? "N/A";
              consultantEmail =
                  consultationDetails["consultant_details"]["consultant_email"].toString() ?? "N/A";
              consultantMobile =
                  consultationDetails["consultant_details"]["consultant_mobile"].toString() ??
                      "N/A";
              consultantEducation =
                  consultationDetails["consultant_details"]["education"].toString() ?? "N/A";
              consultantDescription =
                  consultationDetails["consultant_details"]["description"].toString() ?? "N/A";
              speciality = consultationDetails["message"]["specality"].toString() ?? "N/A";
              reasonOfVisit =
                  consultationDetails["message"]["reason_for_visit"].toString() ?? "N/A";
              appStartingTime =
                  consultationDetails["message"]["appointment_start_time"].toString() ?? "N/A";
              appEndTime =
                  consultationDetails["message"]["appointment_end_time"].toString() ?? "N/A";
              appointmentStatus =
                  camelize(consultationDetails["message"]["appointment_status"].toString()) ??
                      "N/A";
              appointmentDuration =
                  consultationDetails["message"]["appointment_duration"].toString() ?? "N/A";
              callStatus = consultationDetails["message"]["call_status"] != null
                  ? consultationDetails["message"]["call_status"].toString()
                  : "N/A" ?? "N/A";
              consultationFees =
                  consultationDetails["message"]["consultation_fees"].toString() ?? "N/A";
              modeOfPayment = consultationDetails["message"]["mode_of_payment"].toString() ?? "N/A";
              allergy = consultationDetails["message"]["alergy"].toString() ?? "N/A";
              instruction = consultationDetails["message"]["consultation_internal_notes"] ?? "N/A";
              diagnosis = consultationDetails["message"]["diagnosis"].toString() ?? "N/A";
              adviceNotes =
                  consultationDetails["message"]["consultation_advice_notes"].toString() ?? "N/A";
              appointmentModel =
                  consultationDetails["message"]["appointment_model"].toString() ?? "N/A";
              vendorName = consultationDetails['consultant_details']['vendor_name'] ?? "N/A";
              affiliation_unique_name =
                  consultationDetails['message']['affiliation_unique_name'] ?? "global_services";
              prescription = consultationDetails["message"]["prescription"] ?? "N/A";
              genixRadiology = consultationDetails["message"]["radiology"] ?? "N/A"; //radiology
              genixDiagnosis = consultationDetails["message"]["patient_diagnosis"] ?? "N/A";

              ///kisok
              kisokCheckinHistory = consultationDetails["message"]["kiosk_checkin_history"]
                              .toString() !=
                          "null" &&
                      consultationDetails["message"]["kiosk_checkin_history"].length > 0
                  ? kisokDataManipulation(consultationDetails["message"]["kiosk_checkin_history"])
                  : 'N/A';
              if (consultationDetails['consultant_details']['vendor_name'] == 'GENIX') {
                kisokCheckinHistory.removeWhere((e) => e['type'] == 'Visceral Fat');
                kisokCheckinHistory.removeWhere((e) => e['type'] == 'Waist Hip Ratio');
                kisokCheckinHistory.removeWhere((e) => e['type'] == 'Basal Metabolic Rate');
                kisokCheckinHistory.removeWhere((e) => e['type'] == 'Waist Height Ratio');
                kisokCheckinHistory.removeWhere((e) => e['type'] == 'Bone Mineral Content');
                kisokCheckinHistory.removeWhere((e) => e['type'] == 'Body Cell Mass');
              }

              // kisokCheckinHistory = consultationDetails["message"]
              //         ["kiosk_checkin_history"] ??
              //     "N/A";

              labTestList = consultationDetails["message"]["lab_tests"] ?? [];

              if (labTestList.length > 0) {
                for (int i = 0; i < labTestList.length; i++) {
                  print(labTestList[i]['lab_note']);
                  if (labTestList[i]['lab_note'] != null && labTestList[i]['lab_note'] != '') {
                    labNotes = labTestList[i]['lab_note'].toString();
                  }
                }
              }

              notes = consultationDetails['message']['notes'] ?? ["N/A"];
              // consultantFee= consultationDetails['message']['consultation_fees'].toString()?? 'N/A';
              ihlConsultantId = consultationDetails["message"]["ihl_consultant_id"] ?? 'N/A';
              vendorName == 'GENIX' ? getSignature() : '';
              vendorName == 'GENIX' ? getPlatformData() : '';
            });

            String appointmentStartTime1 = appStartingTime;

            if (appointmentStartTime1 != "" ||
                appointmentStartTime1 != null ||
                appStartingTime != null) {
              if (appointmentStartTime1[7] != '-') {
                String appEndTime = '';
                for (var i = 0; i < appointmentStartTime1.length; i++) {
                  if (i == 5) {
                    appEndTime += '0' + appointmentStartTime1[i];
                  } else {
                    appEndTime += appointmentStartTime1[i];
                  }
                }
                appointmentStartTime1 = appEndTime;
              }
              if (appointmentStartTime1[10] != " ") {
                String appEndTime = '';
                for (var i = 0; i < appointmentStartTime1.length; i++) {
                  if (i == 8) {
                    appEndTime += '0' + appointmentStartTime1[i];
                  } else {
                    appEndTime += appointmentStartTime1[i];
                  }
                }
                appointmentStartTime1 = appEndTime;
              }
            }

            String appointmentStartstringTime = appointmentStartTime1.substring(11, 19);
            String appointmentStartTime = appointmentStartTime1.substring(0, 10);
            DateTime startTimeformattime = DateFormat.jm().parse(appointmentStartstringTime);
            String starttime = DateFormat("HH:mm:ss").format(startTimeformattime);
            String appointmentStartdateToFormat = appointmentStartTime + " " + starttime;
            appointmentStartingTime = DateTime.parse(appointmentStartdateToFormat);

            String appointmentEndTime1 = appEndTime;

            if (appointmentEndTime1[7] != '-') {
              String appEndTime = '';
              for (var i = 0; i < appointmentEndTime1.length; i++) {
                if (i == 5) {
                  appEndTime += '0' + appointmentEndTime1[i];
                } else {
                  appEndTime += appointmentEndTime1[i];
                }
              }
              appointmentEndTime1 = appEndTime;
            }
            if (appointmentEndTime1[10] != " ") {
              String appEndTime = '';
              for (var i = 0; i < appointmentEndTime1.length; i++) {
                if (i == 8) {
                  appEndTime += '0' + appointmentEndTime1[i];
                } else {
                  appEndTime += appointmentEndTime1[i];
                }
              }
              appointmentEndTime1 = appEndTime;
            }

            String appointmentEndstringTime = appointmentEndTime1.substring(11, 19);
            String appointmentEndTime = appointmentEndTime1.substring(0, 10);
            DateTime endTimeformattime = DateFormat.jm().parse(appointmentEndstringTime);
            String endtime = DateFormat("HH:mm:ss").format(endTimeformattime);
            String appointmentEndDateToFormat = appointmentEndTime + " " + endtime;
            appointmentEndingTime = DateTime.parse(appointmentEndDateToFormat);

            ///after getting dummyMedFiles List OR  document id
            if (dummmyMedFiles.length > 0) {
              //we call the files view api with documentid and
              medFiles =
                  await MedicalFilesApi.getFilesSummary(ihlConsultantId, appID: appointmentID);
              if (mounted) {
                setState(() {
                  medFiles;
                });
              }
            }
          }
        } else {
          consultationDetails = {};
        }
      } else {
        if (mounted)
          setState(() {
            loading = false;
            failed = true;
          });

        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: new Text("Please try again later..."),
          backgroundColor: AppColors.primaryColor,
        ));
      }
    } catch (e) {
      print(e);
      appointmentDetails(appointmentID);
    }
    if (mounted) {
      setState(() {
        loading = false;
      });
    }
    return consultationDetails;
  }

  kisokDataManipulation(kisokData) {
    var LastCheckinList = [];
    var type;
    var value;
    var status;
    var unit;
    //weight
    if (kisokData['weightKG'] != null) {
      type = 'Weight';
      value = kisokData['weightKG'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = 'Kg';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //bmi
    if (kisokData['bmi'] != null) {
      type = 'BMI';
      value = double.parse(kisokData['bmi'].toString())
          .toStringAsFixed(2); //(double.parse(kisokData['bmi'])).toStringAsFixed(2);
      status = kisokData['bmiClass'];
      unit = 'N/A'; //CHECK
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //blood pressure
    if (kisokData['diastolic'] != null && kisokData['systolic'] != null) {
      type = 'Blood Pressure';
      value = kisokData['systolic'].toString() + '/' + kisokData['diastolic'].toString();
      status = kisokData['bpClass'] ?? 'N/A';
      unit = 'mmHg'; //CHECK
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //bmc
    if (kisokData['percent_body_fat'] != null) {
      type = 'Body Mass Composition';
      value = kisokData['percent_body_fat'];
      status = kisokData['fatClass'] ?? 'N/A';
      unit = '%'; //CHECK
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //ECG
    if (kisokData['ecgBpm'] != null) {
      type = 'ECG';
      value = kisokData['ecgBpm'];
      status = kisokData['leadTwoStatus'] ?? 'N/A';
      unit = 'N/A'; //CHECK
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //SPO2
    if (kisokData['spo2'] != null) {
      type = 'SPO2';
      value = kisokData['spo2'];
      status = kisokData['spo2Class'] ?? 'N/A';
      unit = '%'; //CHECK
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //temprature
    if (kisokData['temperature'] != null) {
      type = 'Temperature';
      value = kisokData['temperature'];
      status = kisokData['temperatureClass'] ?? 'N/A';
      unit = ' F'; //CHECK
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //Test Time
    if (kisokData['dateTime'] != null) {
      type = 'Test Time';
      value = kisokData['dateTime'].toString().substring(0, 10);
      status = 'N/A';
      unit = 'N/A'; //CHECK
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }

    if (kisokData['heightMeters'] != null) {
      type = 'Height';
      value = kisokData['heightMeters'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = 'CM';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //body_fat_mass
    if (kisokData['body_fat_mass'] != null) {
      type = 'Body Fat Mass';
      value = kisokData['body_fat_mass'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"percent_body_fat"
    if (kisokData['percent_body_fat'] != null) {
      type = 'Percentage Body Fat';
      value = kisokData['percent_body_fat'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"skeletal_muscle_mass"
    if (kisokData['skeletal_muscle_mass'] != null) {
      type = 'Skeletal Muscle Mass';
      value = kisokData['skeletal_muscle_mass'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A';
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"body_cell_mass"
    if (kisokData['body_cell_mass'] != null) {
      type = 'Body Cell Mass';
      value = kisokData['body_cell_mass'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A';
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"visceral_fat"
    if (kisokData['visceral_fat'] != null) {
      type = 'Visceral Fat';
      value = kisokData['visceral_fat'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"bone_mineral_content"
    if (kisokData['bone_mineral_content'] != null) {
      type = 'Bone Mineral Content';
      value = kisokData['bone_mineral_content'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"protien"
    if (kisokData['protien'] != null) {
      type = 'Protien';
      value = kisokData['protien'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"mineral"
    if (kisokData['mineral'] != null) {
      type = 'Mineral';
      value = kisokData['mineral'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"intra_cellular_water"
    if (kisokData['intra_cellular_water'] != null) {
      type = 'Intra Cellular Water';
      value = kisokData['intra_cellular_water'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"extra_cellular_water"
    if (kisokData['extra_cellular_water'] != null) {
      type = 'Extra Cellular Water';
      value = kisokData['extra_cellular_water'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"waist_hip_ratio"
    if (kisokData['waist_hip_ratio'] != null) {
      type = 'Waist Hip Ratio';
      value = kisokData['waist_hip_ratio'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"waist_height_ratio"
    if (kisokData['waist_height_ratio'] != null) {
      type = 'Waist Height Ratio';
      value = kisokData['waist_height_ratio'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }
    //"basal_metabolic_rate"
    if (kisokData['basal_metabolic_rate'] != null) {
      type = 'Basal Metabolic Rate';
      value = kisokData['basal_metabolic_rate'].toStringAsFixed(2); //.toStringAsFixed(2);
      status = 'N/A'; //ASK
      unit = '';
      LastCheckinList.add(
          {'type': '$type', 'value': '$value', 'status': '$status', 'unit': '$unit'});
    }

    return LastCheckinList;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      body: ScrollessBasicPageUI(
        appBar: Column(
          children: [
            SizedBox(
              width: 30,
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                BackButton(
                  onPressed: isNotification
                      ? () {
                          Get.offAll(LandingPage()
                              //   HomeScreen(
                              //   introDone: true,
                              // )
                              );
                        }
                      : () {
                          Navigator.pop(context);
                        },
                  color: Colors.white,
                ),
                Flexible(
                  child: Center(
                    child: Text(
                      "Consultation Summary",
                      style: TextStyle(
                          color: Colors.white,
                          fontSize: ScUtil().setSp(22),
                          fontWeight: FontWeight.bold),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
                SizedBox(
                  width: 40,
                )
              ],
            ),
          ],
        ),
        body: loading
            ? Center(child: CircularProgressIndicator())
            : failed
                ? Center(
                    child: Container(
                      child: Text(
                        "No Summary",
                        style: TextStyle(fontSize: 18.0),
                      ),
                    ),
                  )
                : Column(
                    children: [
                      Expanded(
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Container(
                            // const EdgeInsets.symmetric(horizontal: 10),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.all(
                                Radius.circular(30),
                              ),
                            ),
                            child: Padding(
                              padding: const EdgeInsets.symmetric(horizontal: 10),
                              child: ListView(
                                children: <Widget>[
                                  SizedBox(
                                    height: 10,
                                  ),
                                  // consultant details
                                  Card(
                                    margin: EdgeInsets.all(7),
                                    color: AppColors.cardColor,
                                    shadowColor: FitnessAppTheme.grey.withOpacity(0.2),
                                    elevation: 2,
                                    borderOnForeground: true,
                                    shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.all(
                                          Radius.circular(4),
                                        ),
                                        side: BorderSide(
                                          width: 1,
                                          color: FitnessAppTheme.nearlyWhite,
                                        )),
                                    child: Row(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: <Widget>[
                                        Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                            crossAxisAlignment: CrossAxisAlignment.start,
                                            children: <Widget>[
                                              Text(
                                                'Consultant Details' + ':',
                                                style: TextStyle(
                                                  fontSize: 20.0,
                                                  fontWeight: FontWeight.w600,
                                                  color: AppColors.primaryColor,
                                                ),
                                              ),
                                              SizedBox(height: 10.0),
                                              Text(
                                                'Consultant name :',
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: CardColors.titleColor,
                                                ),
                                              ),
                                              Text(
                                                consultantName ?? '',
                                                style: TextStyle(
                                                    color: CardColors.textColor, height: 2),
                                              ),
                                              SizedBox(height: 10.0),
                                              Text(
                                                'Specialty :',
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: CardColors.titleColor,
                                                ),
                                              ),
                                              Text(
                                                speciality ?? '',
                                                style: TextStyle(
                                                    color: CardColors.textColor, height: 2),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                  SizedBox(
                                    height: 10.0,
                                  ),
                                  // consultant details
                                  Card(
                                    margin: const EdgeInsets.only(
                                        left: 10.0, top: 10.0, bottom: 10.0, right: 9.0),
                                    color: AppColors.cardColor,
                                    shadowColor: FitnessAppTheme.grey.withOpacity(0.2),
                                    elevation: 2,
                                    borderOnForeground: true,
                                    shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.all(
                                          Radius.circular(4),
                                        ),
                                        side: BorderSide(
                                          width: 1,
                                          color: FitnessAppTheme.nearlyWhite,
                                        )),
                                    child: Row(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: <Widget>[
                                        Padding(
                                          padding: const EdgeInsets.only(
                                            left: 8.0,
                                            top: 8.0,
                                            bottom: 8.0,
                                          ),
                                          child: Column(
                                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                            crossAxisAlignment: CrossAxisAlignment.start,
                                            children: <Widget>[
                                              Text(
                                                'Consultation Details' + ':',
                                                style: TextStyle(
                                                  fontSize: 20.0,
                                                  fontWeight: FontWeight.w600,
                                                  color: AppColors.primaryColor,
                                                ),
                                              ),
                                              SizedBox(height: 10.0),
                                              Text(
                                                'Appointment ID :',
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: CardColors.titleColor,
                                                ),
                                              ),
                                              Text(
                                                widget.appointmentId ?? '',
                                                style: TextStyle(
                                                    color: CardColors.textColor, height: 2),
                                              ),
                                              SizedBox(height: 10.0),
                                              Text(
                                                'Appointment Start time :',
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: CardColors.titleColor,
                                                ),
                                              ),
                                              Text(
                                                appStartingTime ?? '',
                                                style: TextStyle(
                                                    color: CardColors.textColor, height: 2),
                                              ),
                                              SizedBox(height: 10.0),
                                              Text(
                                                'Appointment End time :',
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: CardColors.titleColor,
                                                ),
                                              ),
                                              Text(
                                                appEndTime ?? '',
                                                style: TextStyle(
                                                    color: CardColors.textColor, height: 2),
                                              ),
                                              SizedBox(height: 10.0),
                                              Text(
                                                'Appointment Status :',
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: CardColors.titleColor,
                                                ),
                                              ),
                                              Text(
                                                appointmentStatus ?? '',
                                                style: TextStyle(
                                                    color: CardColors.textColor, height: 2),
                                              ),
                                              SizedBox(height: 10.0),
                                              Text(
                                                'Charges :',
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: CardColors.titleColor,
                                                ),
                                              ),
                                              consultationFees != '0'
                                                  ? (invoice != null && invoice.discount != '')
                                                      ? Text(
                                                          '${double.parse(consultationFees) - double.parse(invoice.discount)}')
                                                      : Text(
                                                          consultationFees ?? '',
                                                          style: TextStyle(
                                                              color: CardColors.textColor,
                                                              height: 2),
                                                        )
                                                  : Text(
                                                      consultationFees ?? '',
                                                      style: TextStyle(
                                                          color: CardColors.textColor, height: 2),
                                                    ),
                                              SizedBox(height: 10.0),
                                              Text(
                                                'Payment mode :',
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: CardColors.titleColor,
                                                ),
                                              ),
                                              Text(
                                                modeOfPayment ?? '',
                                                style: TextStyle(
                                                    color: CardColors.textColor, height: 2),
                                              ),
                                              SizedBox(height: 10.0),
                                              Text(
                                                'Appointment model :',
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: CardColors.titleColor,
                                                ),
                                              ),
                                              Text(
                                                appointmentModel ?? "appointment",
                                                style: TextStyle(
                                                    color: CardColors.textColor, height: 2),
                                              ),
                                              SizedBox(height: 10.0),
                                              Text(
                                                'Allergy :',
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: CardColors.titleColor,
                                                ),
                                              ),
                                              Text(
                                                (allergy == "" || allergy == null)
                                                    ? "N/A"
                                                    : allergy,
                                                style: TextStyle(
                                                    color: CardColors.textColor, height: 2),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),

                                  SizedBox(
                                    height: 10,
                                  ),
                                  //reason for visit
                                  Card(
                                    margin: EdgeInsets.all(7),
                                    color: AppColors.cardColor,
                                    shadowColor: FitnessAppTheme.grey.withOpacity(0.2),
                                    elevation: 2,
                                    borderOnForeground: true,
                                    shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.all(
                                          Radius.circular(4),
                                        ),
                                        side: BorderSide(
                                          width: 1,
                                          color: FitnessAppTheme.nearlyWhite,
                                        )),
                                    child: Row(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: <Widget>[
                                        Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                            crossAxisAlignment: CrossAxisAlignment.start,
                                            children: <Widget>[
                                              Text(
                                                'Reason For Visit' + ':',
                                                style: TextStyle(
                                                  fontSize: 20.0,
                                                  fontWeight: FontWeight.w600,
                                                  color: AppColors.primaryColor,
                                                ),
                                              ),
                                              SizedBox(height: 10.0),
                                              Text(
                                                reasonOfVisit ?? '',
                                                style: TextStyle(
                                                    color: CardColors.textColor, height: 2),
                                              ),
                                            ],
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),

                                  //vital data
                                  Visibility(
                                    visible: kisokCheckinHistory != null &&
                                        kisokCheckinHistory.length > 0 &&
                                        kisokCheckinHistory != "N/A",
                                    child: Card(
                                      margin: const EdgeInsets.only(
                                          left: 10.0, top: 10.0, bottom: 10.0, right: 9.0),
                                      color: AppColors.cardColor,
                                      shadowColor: FitnessAppTheme.grey.withOpacity(0.2),
                                      elevation: 2,
                                      borderOnForeground: true,
                                      shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.all(
                                            Radius.circular(4),
                                          ),
                                          side: BorderSide(
                                            width: 1,
                                            color: FitnessAppTheme.nearlyWhite,
                                          )),
                                      child: Padding(
                                        padding: const EdgeInsets.only(
                                          left: 8.0,
                                          top: 8.0,
                                          bottom: 8.0,
                                        ),
                                        child: Column(
                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: <Widget>[
                                            Row(
                                              children: [
                                                Text(
                                                  'Vital Data :',
                                                  style: TextStyle(
                                                    fontSize: 20.0,
                                                    fontWeight: FontWeight.w600,
                                                    color: AppColors.primaryColor,
                                                  ),
                                                ),
                                                // SizedBox(
                                                //     width:
                                                //     MediaQuery.of(context)
                                                //         .size
                                                //         .width /
                                                //         3.8),
                                              ],
                                            ),
                                            Visibility(
                                              visible: kisokCheckinHistory != null &&
                                                  kisokCheckinHistory.length > 0 &&
                                                  kisokCheckinHistory != "N/A",
                                              child: Column(
                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                  children: kisokCheckinHistory != null &&
                                                          kisokCheckinHistory.length > 0 &&
                                                          kisokCheckinHistory != "N/A"
                                                      ? kisokCheckinHistory
                                                          .map<Widget>(
                                                            (e) => Padding(
                                                              padding: const EdgeInsets.only(
                                                                  left: 8.0, bottom: 8),
                                                              child: VitalDataTile(
                                                                value: e['type'] == 'Temperature'
                                                                    ? consultationDetails[
                                                                                    'consultant_details']
                                                                                ['vendor_name'] ==
                                                                            'GENIX'
                                                                        ? double.parse(e['value'])
                                                                            .toStringAsFixed(2)
                                                                        : ((double.parse(e['value']
                                                                                        .toString()) *
                                                                                    (9 / 5)) +
                                                                                32)
                                                                            .toStringAsFixed(2)
                                                                    : e['value'].toString(),
                                                                type: e['type'].toString(),
                                                                status: e['status'].toString(),
                                                                unit: e['unit'].toString(),

                                                                // e.value.toString(),
                                                                k: '',
                                                                index: 1,

                                                                // (kisokCheckinHistory
                                                                //     .indexOf(v) +
                                                                //     1)
                                                                //     .toString(),
                                                              ),
                                                            ),
                                                          )
                                                          .toList()
                                                      : dummy
                                                          .map((e) => Padding(
                                                                padding: const EdgeInsets.all(8),
                                                                child: PrescriptionTile(
                                                                    index: (dummy.indexOf(e) + 1)
                                                                        .toString(),
                                                                    value: e),
                                                              ))
                                                          .toList()),
                                            ),
                                            //
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),

                                  SizedBox(
                                    height: 10.0,
                                  ),

                                  ///patient daignosis

                                  Visibility(
                                    visible: genixDiagnosis != null &&
                                        genixDiagnosis.length > 0 &&
                                        genixDiagnosis != "N/A",
                                    child: Card(
                                      margin: EdgeInsets.all(7),
                                      color: AppColors.cardColor,
                                      shadowColor: FitnessAppTheme.grey.withOpacity(0.2),
                                      elevation: 2,
                                      borderOnForeground: true,
                                      shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.all(
                                            Radius.circular(4),
                                          ),
                                          side: BorderSide(
                                            width: 1,
                                            color: FitnessAppTheme.nearlyWhite,
                                          )),
                                      child: Padding(
                                        padding: const EdgeInsets.all(8.0),
                                        child: Column(
                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: <Widget>[
                                            Row(
                                              children: [
                                                Text(
                                                  'Diagnosis :',
                                                  style: TextStyle(
                                                    fontSize: 20.0,
                                                    fontWeight: FontWeight.w600,
                                                    color: AppColors.primaryColor,
                                                  ),
                                                ),
                                                SizedBox(
                                                    width: MediaQuery.of(context).size.width / 3.8),
                                                // IconButton(
                                                //     icon: Icon(
                                                //         Icons.download_sharp,
                                                //         color: AppColors
                                                //             .primaryAccentColor),
                                                //     tooltip:
                                                //     "Download Prescription",
                                                //     onPressed: () async {
                                                //       AwesomeNotifications()
                                                //           .cancelAll();
                                                //       final status =
                                                //       await Permission
                                                //           .storage
                                                //           .request();
                                                //       if (status.isGranted) {
                                                //         SharedPreferences
                                                //         prefs =
                                                //         await SharedPreferences
                                                //             .getInstance();
                                                //         prefs.setString(
                                                //             "consultantNameFromHistorySummary",
                                                //             consultantName);
                                                //         prefs.setString(
                                                //             "consultantEmailFromHistorySummary",
                                                //             consultantEmail);
                                                //         prefs.setString(
                                                //             "consultantMobileFromHistorySummary",
                                                //             consultantMobile);
                                                //         prefs.setString(
                                                //             "consultantEducationFromHistorySummary",
                                                //             consultantEducation);
                                                //         prefs.setString(
                                                //             "consultantDescriptionFromHistorySummary",
                                                //             consultantDescription);
                                                //
                                                //         prefs.setString(
                                                //             "appointmentStartTimeFromHistorySummary",
                                                //             appStartingTime);
                                                //         prefs.setString(
                                                //             "reasonForVisitFromHistorySummary",
                                                //             reasonOfVisit);
                                                //         prefs.setString(
                                                //             "diagnosisFromHistorySummary",
                                                //             diagnosis);
                                                //         prefs.setString(
                                                //             "adviceFromHistorySummary",
                                                //             adviceNotes);
                                                //         prefs.setString(
                                                //             "userFirstNameFromHistorySummary",
                                                //             firstName);
                                                //         prefs.setString(
                                                //             "userLastNameFromHistorySummary",
                                                //             lastName);
                                                //         prefs.setString(
                                                //             "userEmailFromHistorySummary",
                                                //             email);
                                                //         prefs.setString(
                                                //             "userContactFromHistorySummary",
                                                //             mobileNumber);
                                                //         prefs.setString(
                                                //             "ageFromHistorySummary",
                                                //             finalAge
                                                //                 .toString());
                                                //         prefs.setString(
                                                //             "genderFromHistorySummary",
                                                //             finalGender);
                                                //
                                                //         prefs.setString(
                                                //             "useraddressFromHistory",
                                                //             address);
                                                //         prefs.setString(
                                                //             "userareaFromHistory",
                                                //             area);
                                                //         prefs.setString(
                                                //             "usercityFromHistory",
                                                //             city);
                                                //         prefs.setString(
                                                //             "userstateFromHistory",
                                                //             state);
                                                //         prefs.setString(
                                                //             "userpincodeFromHistory",
                                                //             pincode);
                                                //
                                                //         Get.snackbar(
                                                //           '',
                                                //           'Instructions will be saved in your mobile!',
                                                //           backgroundColor: AppColors
                                                //               .primaryAccentColor,
                                                //           colorText:
                                                //           Colors.white,
                                                //           duration: Duration(
                                                //               seconds: 5),
                                                //           isDismissible: false,
                                                //         );
                                                //         new Future.delayed(
                                                //             new Duration(
                                                //                 seconds: 2),
                                                //                 () {
                                                //               genixPrescription(
                                                //                   context,
                                                //                   true,
                                                //                   prescription,
                                                //                   bmi,
                                                //                   weight,
                                                //                   rmpId,
                                                //                   notes,
                                                //                   consultantSignature);
                                                //             });
                                                //       } else if (status
                                                //           .isDenied) {
                                                //         await Permission.storage
                                                //             .request();
                                                //         Get.snackbar(
                                                //             'Storage Access Denied',
                                                //             'Allow Storage permission to continue',
                                                //             backgroundColor:
                                                //             Colors.red,
                                                //             colorText:
                                                //             Colors.white,
                                                //             duration: Duration(
                                                //                 seconds: 5),
                                                //             isDismissible:
                                                //             false,
                                                //             mainButton:
                                                //             TextButton(
                                                //                 onPressed:
                                                //                     () async {
                                                //                   await openAppSettings();
                                                //                 },
                                                //                 child: Text(
                                                //                     'Allow')));
                                                //       } else {
                                                //         Get.snackbar(
                                                //             'Storage Access Denied',
                                                //             'Allow Storage permission to continue',
                                                //             backgroundColor:
                                                //             Colors.red,
                                                //             colorText:
                                                //             Colors.white,
                                                //             duration: Duration(
                                                //                 seconds: 5),
                                                //             isDismissible:
                                                //             false,
                                                //             mainButton:
                                                //             TextButton(
                                                //                 onPressed:
                                                //                     () async {
                                                //                   await openAppSettings();
                                                //                 },
                                                //                 child: Text(
                                                //                     'Allow')));
                                                //       }
                                                //     })
                                              ],
                                            ),
                                            Visibility(
                                              visible: genixDiagnosis != null &&
                                                  genixDiagnosis.length > 0 &&
                                                  genixDiagnosis != "N/A",
                                              child: Column(
                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                  children: genixDiagnosis != null &&
                                                          genixDiagnosis.length > 0 &&
                                                          genixDiagnosis != "N/A"
                                                      ? genixDiagnosis
                                                          // dummy
                                                          .map<Widget>(
                                                            (e) => Padding(
                                                              padding: const EdgeInsets.all(8.0),
                                                              child: DaignosisTile(
                                                                value: e,
                                                                index:
                                                                    (genixDiagnosis.indexOf(e) + 1)
                                                                        .toString(),
                                                              ),
                                                            ),
                                                          )
                                                          .toList()
                                                      : dummy
                                                          .map((e) => Padding(
                                                                padding: const EdgeInsets.all(8),
                                                                child: PrescriptionTile(
                                                                    index: (dummy.indexOf(e) + 1)
                                                                        .toString(),
                                                                    value: e),
                                                              ))
                                                          .toList()),
                                            ),
                                            //
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),

                                  //lab test order
                                  Visibility(
                                    visible: labTestList != null &&
                                        labTestList.length > 0 &&
                                        labTestList != "N/A",

                                    // (vendorName != "" &&
                                    //               vendorName != "") ||
                                    //           (vendorName != null &&
                                    //               vendorName != null) ||
                                    //           (vendorName != "null" &&
                                    //               vendorName != "null") ||
                                    //           (vendorName != "IHL" &&
                                    //               vendorName == "GENIX") ||
                                    //           prescription != null &&
                                    //               prescription != "N/A"||
                                    //       prescription.length > 0 ,
                                    // ? false
                                    // : true,
                                    child: Card(
                                      margin: EdgeInsets.all(7),
                                      color: AppColors.cardColor,
                                      shadowColor: FitnessAppTheme.grey.withOpacity(0.2),
                                      elevation: 2,
                                      borderOnForeground: true,
                                      shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.all(
                                            Radius.circular(4),
                                          ),
                                          side: BorderSide(
                                            width: 1,
                                            color: FitnessAppTheme.nearlyWhite,
                                          )),
                                      child: Padding(
                                        padding: const EdgeInsets.all(8.0),
                                        child: Column(
                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: <Widget>[
                                            Row(
                                              children: [
                                                Text(
                                                  'Lab Tests :',
                                                  style: TextStyle(
                                                    fontSize: 20.0,
                                                    fontWeight: FontWeight.w600,
                                                    color: AppColors.primaryColor,
                                                  ),
                                                ),
                                                SizedBox(
                                                    width:
                                                        MediaQuery.of(context).size.width / 2.97),
                                                Visibility(
                                                  visible: false,
                                                  child: IconButton(
                                                    icon: Icon(Icons.download,
                                                        color: AppColors.primaryAccentColor),
                                                    tooltip: "Download Lab Order",
                                                    onPressed: () async {
                                                      bool permissionGrandted = false;
                                                      if (Platform.isAndroid) {
                                                        final deviceInfo =
                                                            await DeviceInfoPlugin().androidInfo;
                                                        Map<Permission, PermissionStatus> _status;
                                                        if (deviceInfo.version.sdkInt <= 32) {
                                                          _status =
                                                              await [Permission.storage].request();
                                                        } else {
                                                          _status = await [
                                                            Permission.photos,
                                                            Permission.videos
                                                          ].request();
                                                        }
                                                        _status.forEach((permission, status) {
                                                          if (status == PermissionStatus.granted) {
                                                            permissionGrandted = true;
                                                          }
                                                        });
                                                      } else {
                                                        permissionGrandted = true;
                                                      }
                                                      if (permissionGrandted) {
                                                        SharedPreferences prefs =
                                                            await SharedPreferences.getInstance();
                                                        prefs.setString(
                                                            "consultantNameFromHistorySummary",
                                                            consultantName);
                                                        prefs.setString(
                                                            "consultantEmailFromHistorySummary",
                                                            consultantEmail);
                                                        prefs.setString(
                                                            "consultantMobileFromHistorySummary",
                                                            consultantMobile);
                                                        prefs.setString(
                                                            "consultantEducationFromHistorySummary",
                                                            consultantEducation);
                                                        prefs.setString(
                                                            "consultantDescriptionFromHistorySummary",
                                                            consultantDescription);

                                                        prefs.setString(
                                                            "appointmentStartTimeFromHistorySummary",
                                                            appStartingTime);
                                                        prefs.setString(
                                                            "reasonForVisitFromHistorySummary",
                                                            reasonOfVisit);
                                                        prefs.setString(
                                                            "diagnosisFromHistorySummary",
                                                            diagnosis);
                                                        prefs.setString(
                                                            "instructionFromHistorySummary",
                                                            instruction);
                                                        prefs.setString("adviceFromHistorySummary",
                                                            adviceNotes);
                                                        prefs.setString(
                                                            "userFirstNameFromHistorySummary",
                                                            firstName);
                                                        prefs.setString(
                                                            "userLastNameFromHistorySummary",
                                                            lastName);
                                                        prefs.setString(
                                                            "userEmailFromHistorySummary", email);
                                                        prefs.setString(
                                                            "userContactFromHistorySummary",
                                                            mobileNumber);
                                                        prefs.setString("ageFromHistorySummary",
                                                            finalAge.toString());
                                                        prefs.setString("genderFromHistorySummary",
                                                            finalGender);

                                                        prefs.setString(
                                                            "useraddressFromHistory", address);
                                                        prefs.setString(
                                                            "userareaFromHistory", area);
                                                        prefs.setString(
                                                            "usercityFromHistory", city);
                                                        prefs.setString(
                                                            "userstateFromHistory", state);
                                                        prefs.setString(
                                                            "userpincodeFromHistory", pincode);

                                                        Get.snackbar(
                                                          '',
                                                          'Instructions will be saved in your mobile!',
                                                          backgroundColor:
                                                              AppColors.primaryAccentColor,
                                                          colorText: Colors.white,
                                                          duration: Duration(seconds: 5),
                                                          isDismissible: false,
                                                        );
                                                        new Future.delayed(new Duration(seconds: 2),
                                                            () {
                                                          genixLabOrder(
                                                              context,
                                                              true,
                                                              labTestList,
                                                              bmi,
                                                              weight,
                                                              rmpId,
                                                              labNotes,
                                                              consultantSignature);
                                                        });
                                                      } else {
                                                        Get.snackbar('Storage Access Denied',
                                                            'Allow Storage permission to continue',
                                                            backgroundColor: Colors.red,
                                                            colorText: Colors.white,
                                                            duration: Duration(seconds: 5),
                                                            isDismissible: false,
                                                            mainButton: TextButton(
                                                                onPressed: () async {
                                                                  await openAppSettings();
                                                                },
                                                                child: Text('Allow')));
                                                      }
                                                    },
                                                    // onPressed:() {
                                                    //   showModalBottomSheet(
                                                    //       context: context,
                                                    //       backgroundColor: Colors.white,
                                                    //       shape: RoundedRectangleBorder(
                                                    //         borderRadius: BorderRadius.only(
                                                    //             topLeft:
                                                    //             Radius.circular(15.0),
                                                    //             topRight:
                                                    //             Radius.circular(15.0)),
                                                    //       ),
                                                    //       builder: (BuildContext context) {
                                                    //         return StatefulBuilder(builder:
                                                    //             (BuildContext context,
                                                    //             StateSetter mystate) {
                                                    //           return Column(
                                                    //             crossAxisAlignment:
                                                    //             CrossAxisAlignment.start,
                                                    //             mainAxisSize:
                                                    //             MainAxisSize.min,
                                                    //             children: [
                                                    //               Padding(
                                                    //                 padding: const EdgeInsets
                                                    //                     .all(8.0)
                                                    //                     .copyWith(left: 16),
                                                    //                 child: Text(
                                                    //                   'Share Lab Order ?',
                                                    //                   style: TextStyle(
                                                    //                       color: AppColors
                                                    //                           .appTextColor, //AppColors.primaryColor
                                                    //                       fontSize: 24,
                                                    //                       fontWeight:
                                                    //                       FontWeight
                                                    //                           .bold),
                                                    //                   textAlign:
                                                    //                   TextAlign.left,
                                                    //                 ),
                                                    //               ),
                                                    //               Divider(
                                                    //                 indent: 10,
                                                    //                 endIndent: 10,
                                                    //                 thickness: 2,
                                                    //               ),
                                                    //               Expanded(
                                                    //                 child: Align(
                                                    //                   alignment:
                                                    //                   Alignment.center,
                                                    //                   child: Padding(
                                                    //                     padding:
                                                    //                     const EdgeInsets
                                                    //                         .all(8.0),
                                                    //                     child: Image.network(
                                                    //                       'https://i.postimg.cc/mrDDfxQT/Group-43.png',
                                                    //                     ),
                                                    //                   ),
                                                    //                 ),
                                                    //               ),
                                                    //               Padding(
                                                    //                 padding:
                                                    //                 const EdgeInsets.all(
                                                    //                     10.0),
                                                    //                 child: RichText(
                                                    //                   textAlign:
                                                    //                   TextAlign.left,
                                                    //                   text: TextSpan(
                                                    //                     text:
                                                    //                     "By providing your consent to India Health Link (IHL) Pvt. Ltd to share your prescription and personal contact details to 1mg Technology Pvt Ltd in your own interest for your lab test order fulfillment as per the ",
                                                    //                     style: TextStyle(
                                                    //                         color: AppColors
                                                    //                             .appTextColor, //AppColors.primaryColor
                                                    //                         fontSize: 14),
                                                    //                     children: [
                                                    //                       TextSpan(
                                                    //                         text:
                                                    //                         "Terms & Conditions",
                                                    //                         style: TextStyle(
                                                    //                             fontWeight:
                                                    //                             FontWeight
                                                    //                                 .bold,
                                                    //                             color: Colors
                                                    //                                 .blue,
                                                    //                             decoration:
                                                    //                             TextDecoration
                                                    //                                 .underline),
                                                    //                         recognizer:
                                                    //                         TapGestureRecognizer()
                                                    //                           ..onTap =
                                                    //                               () {
                                                    //                             Get.dialog(
                                                    //                                 PolicyDialog(
                                                    //                                   title:
                                                    //                                   "Tele Consultation T & C",
                                                    //                                   mdFileName:
                                                    //                                   'TeleTOC.md',
                                                    //                                 ));
                                                    //                           },
                                                    //                       ),
                                                    //                       TextSpan(
                                                    //                           text: " and "),
                                                    //                       TextSpan(
                                                    //                         text:
                                                    //                         "Privacy Policy",
                                                    //                         style: TextStyle(
                                                    //                             fontWeight:
                                                    //                             FontWeight
                                                    //                                 .bold,
                                                    //                             color: Colors
                                                    //                                 .blue,
                                                    //                             decoration:
                                                    //                             TextDecoration
                                                    //                                 .underline),
                                                    //                         recognizer:
                                                    //                         TapGestureRecognizer()
                                                    //                           ..onTap =
                                                    //                               () {
                                                    //                             Get.dialog(
                                                    //                                 PolicyDialog(
                                                    //                                   title:
                                                    //                                   "Privacy Policy",
                                                    //                                   mdFileName:
                                                    //                                   'PrivacyPolicy.md',
                                                    //                                 ));
                                                    //                           },
                                                    //                       ),
                                                    //                       TextSpan(
                                                    //                         text:
                                                    //                         ", you will be able to avail the 'Order Lab Test' services.",
                                                    //                         style: TextStyle(
                                                    //                             color: AppColors
                                                    //                                 .appTextColor, //AppColors.primaryColor
                                                    //                             fontSize: 14),
                                                    //                       ),
                                                    //                     ],
                                                    //                   ),
                                                    //                 ),
                                                    //               ),
                                                    //               CheckboxListTile(
                                                    //                 controlAffinity:
                                                    //                 ListTileControlAffinity
                                                    //                     .leading,
                                                    //                 value: isAgree,
                                                    //                 onChanged: (val) {
                                                    //                   mystate(() {
                                                    //                     isAgree = val;
                                                    //                     print(isAgree);
                                                    //                   });
                                                    //                 },
                                                    //
                                                    //                 title: Text(
                                                    //                   'I agree to the Terms and Condition for the service',
                                                    //                   style: TextStyle(
                                                    //                       color: AppColors
                                                    //                           .appTextColor,
                                                    //                       fontSize: 12),
                                                    //                 ),
                                                    //                 // isThreeLine: false,
                                                    //                 contentPadding:
                                                    //                 EdgeInsets.only(
                                                    //                     left: 16),
                                                    //               ),
                                                    //               Padding(
                                                    //                 padding:
                                                    //                 const EdgeInsets.all(
                                                    //                     8.0),
                                                    //                 child: Row(
                                                    //                   mainAxisAlignment:
                                                    //                   MainAxisAlignment
                                                    //                       .spaceEvenly,
                                                    //                   children: [
                                                    //                     RaisedButton(
                                                    //                       color: isAgree
                                                    //                           ? Color(
                                                    //                           0xff4393cf)
                                                    //                           : Colors.grey,
                                                    //                       shape:
                                                    //                       RoundedRectangleBorder(
                                                    //                           borderRadius:
                                                    //                           BorderRadius.circular(
                                                    //                               10.0),
                                                    //                           side:
                                                    //                           BorderSide(
                                                    //                             color: isAgree
                                                    //                                 ? Color(
                                                    //                                 0xff4393cf)
                                                    //                                 : Colors
                                                    //                                 .grey,
                                                    //                           )),
                                                    //                       child: Text(
                                                    //                         'Share',
                                                    //                         style: TextStyle(
                                                    //                             color: Colors
                                                    //                                 .white),
                                                    //                       ),
                                                    //                       onPressed: isAgree
                                                    //                           ? () {
                                                    //                         sendPrescriptionTo1MG();
                                                    //                         Get.close(
                                                    //                             1);
                                                    //                       }
                                                    //                           : null,
                                                    //                     ),
                                                    //                     // SizedBox(width: 10.0),
                                                    //                     RaisedButton(
                                                    //                       shape: RoundedRectangleBorder(
                                                    //                           borderRadius:
                                                    //                           BorderRadius
                                                    //                               .circular(
                                                    //                               10.0),
                                                    //                           side: BorderSide(
                                                    //                               color: Color(
                                                    //                                   0xff4393cf))),
                                                    //                       color: Color(
                                                    //                           0xff4393cf),
                                                    //                       child: Text(
                                                    //                         'Cancel',
                                                    //                         style: TextStyle(
                                                    //                             color: Colors
                                                    //                                 .white),
                                                    //                       ),
                                                    //                       onPressed: () {
                                                    //                         Navigator.of(
                                                    //                             context)
                                                    //                             .pop();
                                                    //                       },
                                                    //                     ),
                                                    //                   ],
                                                    //                 ),
                                                    //               ),
                                                    //               SizedBox(height: 20),
                                                    //             ],
                                                    //           );
                                                    //         });
                                                    //       });
                                                    // },
                                                  ),
                                                )
                                              ],
                                            ),
                                            // Text(
                                            //   'Prescribed Tests',
                                            //   style: TextStyle(
                                            //     fontWeight: FontWeight.bold,
                                            //     color: CardColors.titleColor,
                                            //   ),
                                            // ),
                                            Visibility(
                                              visible: labTestList != null &&
                                                  labTestList.length > 0 &&
                                                  labTestList != "N/A",
                                              child: Column(
                                                mainAxisAlignment: MainAxisAlignment.start,
                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                children: labTestList != null &&
                                                        labTestList.asMap().containsKey("lab_note")
                                                    ? labTestList
                                                        .map<Widget>((e) => Padding(
                                                              padding: const EdgeInsets.all(8),
                                                              child: LabOrderTile(
                                                                  showNotesOfLabTests: false,
                                                                  index:
                                                                      (labTestList.indexOf(e) + 1)
                                                                          .toString(),
                                                                  value: e),
                                                            ))
                                                        .toList()
                                                    : [],
                                              ),
                                            ),
                                            Padding(
                                              padding: const EdgeInsets.only(
                                                  top: 15, bottom: 5, left: 10, right: 10),
                                              child: Text(
                                                'Remarks:',
                                                style: TextStyle(
                                                  fontWeight: FontWeight.bold,
                                                  color: CardColors.titleColor,
                                                ),
                                              ),
                                            ),
                                            Visibility(
                                              visible: labTestList != null &&
                                                  labTestList.length > 0 &&
                                                  labTestList != "N/A",
                                              child: Column(
                                                mainAxisAlignment: MainAxisAlignment.start,
                                                crossAxisAlignment: CrossAxisAlignment.start,
                                                children: labTestList != null
                                                    ? labTestList
                                                        .map<Widget>((e) => Padding(
                                                              padding: const EdgeInsets.symmetric(
                                                                  horizontal: 8, vertical: 4),
                                                              child: LabOrderTile(
                                                                  showNotesOfLabTests: true,
                                                                  index:
                                                                      (labTestList.indexOf(e) + 1)
                                                                          .toString(),
                                                                  value: e),
                                                            ))
                                                        .toList()
                                                    : [],
                                              ),
                                            ),
                                            Visibility(
                                              ///in issue list 6.0.5
                                              ///request came to disable the order lab test
                                              visible: false,
                                              // visible: logoUrl != null &&
                                              //     logoUrl != '',
                                              child: Row(
                                                mainAxisAlignment: MainAxisAlignment.end,
                                                mainAxisSize: MainAxisSize.max,
                                                children: [
                                                  Container(
                                                    // width: ScUtil().setWidth(270),
                                                    child: ElevatedButton(
                                                      style: ElevatedButton.styleFrom(
                                                        shape: RoundedRectangleBorder(
                                                          borderRadius: BorderRadius.circular(20.0),
                                                        ),
                                                        backgroundColor: AppColors.primaryColor,
                                                      ),
                                                      child: Text('Order Lab Tests',
                                                          style: TextStyle(
                                                            fontSize: 16,
                                                          )),
                                                      onPressed: () {
                                                        showModalBottomSheet(
                                                            context: context,
                                                            backgroundColor: Colors.white,
                                                            shape: RoundedRectangleBorder(
                                                              borderRadius: BorderRadius.only(
                                                                  topLeft: Radius.circular(15.0),
                                                                  topRight: Radius.circular(15.0)),
                                                            ),
                                                            builder: (BuildContext context) {
                                                              return StatefulBuilder(builder:
                                                                  (BuildContext context,
                                                                      StateSetter mystate) {
                                                                return Column(
                                                                  crossAxisAlignment:
                                                                      CrossAxisAlignment.start,
                                                                  mainAxisSize: MainAxisSize.min,
                                                                  children: [
                                                                    Padding(
                                                                      padding:
                                                                          const EdgeInsets.all(8.0)
                                                                              .copyWith(left: 16),
                                                                      child: Text(
                                                                        'Share Lab Tests ?',
                                                                        style: TextStyle(
                                                                            color: AppColors
                                                                                .appTextColor, //AppColors.primaryColor
                                                                            fontSize: 24,
                                                                            fontWeight:
                                                                                FontWeight.bold),
                                                                        textAlign: TextAlign.left,
                                                                      ),
                                                                    ),
                                                                    Divider(
                                                                      indent: 10,
                                                                      endIndent: 10,
                                                                      thickness: 2,
                                                                    ),
                                                                    Expanded(
                                                                      child: Align(
                                                                        alignment: Alignment.center,
                                                                        child: Padding(
                                                                          padding:
                                                                              const EdgeInsets.all(
                                                                                  8.0),
                                                                          // child: Image
                                                                          //     .network(
                                                                          //   'https://i.postimg.cc/mrDDfxQT/Group-43.png',
                                                                          // ),
                                                                          child: logoUrl != null &&
                                                                                  logoUrl != ''
                                                                              ? Row(
                                                                                  mainAxisAlignment:
                                                                                      MainAxisAlignment
                                                                                          .center,
                                                                                  children: [
                                                                                    Card(
                                                                                      elevation: 0,
                                                                                      child:
                                                                                          Padding(
                                                                                        padding:
                                                                                            EdgeInsets.all(
                                                                                                10),
                                                                                        child: Image
                                                                                            .asset(
                                                                                          'assets/images/ihl-plus.png',
                                                                                        ),
                                                                                      ),
                                                                                    ),
                                                                                    // Image.asset(''),
                                                                                    Card(
                                                                                        elevation:
                                                                                            0,
                                                                                        child: Icon(
                                                                                          Icons
                                                                                              .send_sharp,
                                                                                          color: AppColors
                                                                                              .appItemTitleTextColor,
                                                                                          size: 35,
                                                                                        )),
                                                                                    Card(
                                                                                      elevation: 0,
                                                                                      child: logoUrl ==
                                                                                              'https://indiahealthlink.com/affiliate_logo/ihl-plus.png'
                                                                                          ? Image
                                                                                              .network(
                                                                                              'https://dashboard.indiahealthlink.com/affiliate_logo/ihl-plus.png',
                                                                                            )
                                                                                          : Image
                                                                                              .network(
                                                                                              '$logoUrl',
                                                                                            ),
                                                                                    ),
                                                                                  ],
                                                                                )
                                                                              : Container(
                                                                                  height: 0,
                                                                                  width: 0,
                                                                                ),
                                                                        ),
                                                                      ),
                                                                    ),
                                                                    Padding(
                                                                      padding: const EdgeInsets.all(
                                                                          10.0),
                                                                      child: RichText(
                                                                        textAlign: TextAlign.left,
                                                                        text: TextSpan(
                                                                          text:
                                                                              "By providing your consent to India Health Link (IHL) Pvt. Ltd to share your lab Tests and personal contact details to 1mg Technology Pvt Ltd in your own interest for your lab Tests order fulfillment as per the ",
                                                                          style: TextStyle(
                                                                              color: AppColors
                                                                                  .appTextColor, //AppColors.primaryColor
                                                                              fontSize: 14),
                                                                          children: [
                                                                            TextSpan(
                                                                              text:
                                                                                  "Terms & Conditions",
                                                                              style: TextStyle(
                                                                                  fontWeight:
                                                                                      FontWeight
                                                                                          .bold,
                                                                                  color:
                                                                                      Colors.blue,
                                                                                  decoration:
                                                                                      TextDecoration
                                                                                          .underline),
                                                                              recognizer:
                                                                                  TapGestureRecognizer()
                                                                                    ..onTap = () {
                                                                                      Get.dialog(
                                                                                          PolicyDialog(
                                                                                        title:
                                                                                            "Tele Consultation T & C",
                                                                                        mdFileName:
                                                                                            'TeleTOC.md',
                                                                                      ));
                                                                                    },
                                                                            ),
                                                                            TextSpan(text: " and "),
                                                                            TextSpan(
                                                                              text:
                                                                                  "Privacy Policy",
                                                                              style: TextStyle(
                                                                                  fontWeight:
                                                                                      FontWeight
                                                                                          .bold,
                                                                                  color:
                                                                                      Colors.blue,
                                                                                  decoration:
                                                                                      TextDecoration
                                                                                          .underline),
                                                                              recognizer:
                                                                                  TapGestureRecognizer()
                                                                                    ..onTap = () {
                                                                                      Get.dialog(
                                                                                          PolicyDialog(
                                                                                        title:
                                                                                            "Privacy Policy",
                                                                                        mdFileName:
                                                                                            'PrivacyPolicy.md',
                                                                                      ));
                                                                                    },
                                                                            ),
                                                                            TextSpan(
                                                                              text:
                                                                                  ", you will be able to avail the 'Lab Test Order' services.",
                                                                              style: TextStyle(
                                                                                  color: AppColors
                                                                                      .appTextColor, //AppColors.primaryColor
                                                                                  fontSize: 14),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),
                                                                    CheckboxListTile(
                                                                      controlAffinity:
                                                                          ListTileControlAffinity
                                                                              .leading,
                                                                      value: isAgree,
                                                                      onChanged: (val) {
                                                                        mystate(() {
                                                                          isAgree = val;
                                                                          print(isAgree);
                                                                        });
                                                                      },

                                                                      title: Text(
                                                                        'I agree to the Terms and Condition for the service',
                                                                        style: TextStyle(
                                                                            color: AppColors
                                                                                .appTextColor,
                                                                            fontSize: 12),
                                                                      ),
                                                                      // isThreeLine: false,
                                                                      contentPadding:
                                                                          EdgeInsets.only(left: 16),
                                                                    ),
                                                                    Padding(
                                                                      padding:
                                                                          const EdgeInsets.all(8.0),
                                                                      child: Row(
                                                                        mainAxisAlignment:
                                                                            MainAxisAlignment
                                                                                .spaceEvenly,
                                                                        children: [
                                                                          ElevatedButton(
                                                                            style: ElevatedButton
                                                                                .styleFrom(
                                                                              shape:
                                                                                  RoundedRectangleBorder(
                                                                                borderRadius:
                                                                                    BorderRadius
                                                                                        .circular(
                                                                                            10.0),
                                                                                side: BorderSide(
                                                                                  color: isAgree
                                                                                      ? AppColors
                                                                                          .primaryColor
                                                                                      : Colors.grey,
                                                                                ),
                                                                              ),
                                                                              backgroundColor: isAgree
                                                                                  ? AppColors
                                                                                      .primaryColor
                                                                                  : Colors.grey,
                                                                            ),
                                                                            child: Text(
                                                                              'Share',
                                                                              style: TextStyle(
                                                                                  color:
                                                                                      Colors.white),
                                                                            ),
                                                                            onPressed: isAgree
                                                                                ? () {
                                                                                    sendLabTestTo1MG();
                                                                                    Get.close(1);
                                                                                  }
                                                                                : null,
                                                                          ),
                                                                          // SizedBox(width: 10.0),
                                                                          ElevatedButton(
                                                                            style: ElevatedButton
                                                                                .styleFrom(
                                                                              shape:
                                                                                  RoundedRectangleBorder(
                                                                                borderRadius:
                                                                                    BorderRadius
                                                                                        .circular(
                                                                                            10.0),
                                                                              ),
                                                                              backgroundColor:
                                                                                  AppColors
                                                                                      .primaryColor,
                                                                            ),
                                                                            child: Text(
                                                                              'Cancel',
                                                                              style: TextStyle(
                                                                                  color:
                                                                                      Colors.white),
                                                                            ),
                                                                            onPressed: () {
                                                                              Navigator.of(context)
                                                                                  .pop();
                                                                            },
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                    SizedBox(height: 20),
                                                                  ],
                                                                );
                                                              });
                                                            });
                                                      },
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),

                                  ///radiology test

                                  Visibility(
                                    visible: genixRadiology != null &&
                                        genixRadiology.length > 0 &&
                                        genixRadiology != "N/A",
                                    child: Card(
                                      margin: EdgeInsets.all(7),
                                      color: AppColors.cardColor,
                                      shadowColor: FitnessAppTheme.grey.withOpacity(0.2),
                                      elevation: 2,
                                      borderOnForeground: true,
                                      shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.all(
                                            Radius.circular(4),
                                          ),
                                          side: BorderSide(
                                            width: 1,
                                            color: FitnessAppTheme.nearlyWhite,
                                          )),
                                      child: Padding(
                                        padding: const EdgeInsets.all(8.0),
                                        child: Column(
                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: <Widget>[
                                            Row(
                                              children: [
                                                Text(
                                                  'Radiology :',
                                                  style: TextStyle(
                                                    fontSize: 20.0,
                                                    fontWeight: FontWeight.w600,
                                                    color: AppColors.primaryColor,
                                                  ),
                                                ),
                                                SizedBox(
                                                    width: MediaQuery.of(context).size.width / 3.8),
                                                // IconButton(
                                                //     icon: Icon(
                                                //         Icons.download_sharp,
                                                //         color: AppColors
                                                //             .primaryAccentColor),
                                                //     tooltip:
                                                //     "Download Prescription",
                                                //     onPressed: () async {
                                                //       AwesomeNotifications()
                                                //           .cancelAll();
                                                //       final status =
                                                //       await Permission
                                                //           .storage
                                                //           .request();
                                                //       if (status.isGranted) {
                                                //         SharedPreferences
                                                //         prefs =
                                                //         await SharedPreferences
                                                //             .getInstance();
                                                //         prefs.setString(
                                                //             "consultantNameFromHistorySummary",
                                                //             consultantName);
                                                //         prefs.setString(
                                                //             "consultantEmailFromHistorySummary",
                                                //             consultantEmail);
                                                //         prefs.setString(
                                                //             "consultantMobileFromHistorySummary",
                                                //             consultantMobile);
                                                //         prefs.setString(
                                                //             "consultantEducationFromHistorySummary",
                                                //             consultantEducation);
                                                //         prefs.setString(
                                                //             "consultantDescriptionFromHistorySummary",
                                                //             consultantDescription);
                                                //
                                                //         prefs.setString(
                                                //             "appointmentStartTimeFromHistorySummary",
                                                //             appStartingTime);
                                                //         prefs.setString(
                                                //             "reasonForVisitFromHistorySummary",
                                                //             reasonOfVisit);
                                                //         prefs.setString(
                                                //             "diagnosisFromHistorySummary",
                                                //             diagnosis);
                                                //         prefs.setString(
                                                //             "adviceFromHistorySummary",
                                                //             adviceNotes);
                                                //         prefs.setString(
                                                //             "userFirstNameFromHistorySummary",
                                                //             firstName);
                                                //         prefs.setString(
                                                //             "userLastNameFromHistorySummary",
                                                //             lastName);
                                                //         prefs.setString(
                                                //             "userEmailFromHistorySummary",
                                                //             email);
                                                //         prefs.setString(
                                                //             "userContactFromHistorySummary",
                                                //             mobileNumber);
                                                //         prefs.setString(
                                                //             "ageFromHistorySummary",
                                                //             finalAge
                                                //                 .toString());
                                                //         prefs.setString(
                                                //             "genderFromHistorySummary",
                                                //             finalGender);
                                                //
                                                //         prefs.setString(
                                                //             "useraddressFromHistory",
                                                //             address);
                                                //         prefs.setString(
                                                //             "userareaFromHistory",
                                                //             area);
                                                //         prefs.setString(
                                                //             "usercityFromHistory",
                                                //             city);
                                                //         prefs.setString(
                                                //             "userstateFromHistory",
                                                //             state);
                                                //         prefs.setString(
                                                //             "userpincodeFromHistory",
                                                //             pincode);
                                                //
                                                //         Get.snackbar(
                                                //           '',
                                                //           'Instructions will be saved in your mobile!',
                                                //           backgroundColor: AppColors
                                                //               .primaryAccentColor,
                                                //           colorText:
                                                //           Colors.white,
                                                //           duration: Duration(
                                                //               seconds: 5),
                                                //           isDismissible: false,
                                                //         );
                                                //         new Future.delayed(
                                                //             new Duration(
                                                //                 seconds: 2),
                                                //                 () {
                                                //               genixPrescription(
                                                //                   context,
                                                //                   true,
                                                //                   prescription,
                                                //                   bmi,
                                                //                   weight,
                                                //                   rmpId,
                                                //                   notes,
                                                //                   consultantSignature);
                                                //             });
                                                //       } else if (status
                                                //           .isDenied) {
                                                //         await Permission.storage
                                                //             .request();
                                                //         Get.snackbar(
                                                //             'Storage Access Denied',
                                                //             'Allow Storage permission to continue',
                                                //             backgroundColor:
                                                //             Colors.red,
                                                //             colorText:
                                                //             Colors.white,
                                                //             duration: Duration(
                                                //                 seconds: 5),
                                                //             isDismissible:
                                                //             false,
                                                //             mainButton:
                                                //             TextButton(
                                                //                 onPressed:
                                                //                     () async {
                                                //                   await openAppSettings();
                                                //                 },
                                                //                 child: Text(
                                                //                     'Allow')));
                                                //       } else {
                                                //         Get.snackbar(
                                                //             'Storage Access Denied',
                                                //             'Allow Storage permission to continue',
                                                //             backgroundColor:
                                                //             Colors.red,
                                                //             colorText:
                                                //             Colors.white,
                                                //             duration: Duration(
                                                //                 seconds: 5),
                                                //             isDismissible:
                                                //             false,
                                                //             mainButton:
                                                //             TextButton(
                                                //                 onPressed:
                                                //                     () async {
                                                //                   await openAppSettings();
                                                //                 },
                                                //                 child: Text(
                                                //                     'Allow')));
                                                //       }
                                                //     })
                                              ],
                                            ),
                                            Visibility(
                                              visible: genixRadiology != null &&
                                                  genixRadiology.length > 0 &&
                                                  genixRadiology != "N/A",
                                              child: Column(
                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                  children: genixRadiology != null &&
                                                          genixRadiology.length > 0 &&
                                                          genixRadiology != "N/A"
                                                      ? genixRadiology
                                                          // dummy
                                                          .map<Widget>(
                                                            (e) => Padding(
                                                              padding: const EdgeInsets.all(8.0),
                                                              child: RadiologyTile(
                                                                value: e,
                                                                index:
                                                                    (genixRadiology.indexOf(e) + 1)
                                                                        .toString(),
                                                              ),
                                                            ),
                                                          )
                                                          .toList()
                                                      : dummy
                                                          .map((e) => Padding(
                                                                padding: const EdgeInsets.all(8),
                                                                child: PrescriptionTile(
                                                                    index: (dummy.indexOf(e) + 1)
                                                                        .toString(),
                                                                    value: e),
                                                              ))
                                                          .toList()),
                                            ),
                                            //
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),

                                  //prescription
                                  Visibility(
                                    visible: prescription != null &&
                                        prescription.length > 0 &&
                                        prescription != "N/A",

                                    // (vendorName != "" &&
                                    //               vendorName != "") ||
                                    //           (vendorName != null &&
                                    //               vendorName != null) ||
                                    //           (vendorName != "null" &&
                                    //               vendorName != "null") ||
                                    //           (vendorName != "IHL" &&
                                    //               vendorName == "GENIX") ||
                                    //           prescription != null &&
                                    //               prescription != "N/A"||
                                    //       prescription.length > 0 ,
                                    // ? false
                                    // : true,
                                    child: Card(
                                      margin: EdgeInsets.all(7),
                                      color: AppColors.cardColor,
                                      shadowColor: FitnessAppTheme.grey.withOpacity(0.2),
                                      elevation: 2,
                                      borderOnForeground: true,
                                      shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.all(
                                            Radius.circular(4),
                                          ),
                                          side: BorderSide(
                                            width: 1,
                                            color: FitnessAppTheme.nearlyWhite,
                                          )),
                                      child: Padding(
                                        padding: const EdgeInsets.all(8.0),
                                        child: Column(
                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: <Widget>[
                                            Row(
                                              children: [
                                                Text(
                                                  'Prescription :',
                                                  style: TextStyle(
                                                    fontSize: 20.0,
                                                    fontWeight: FontWeight.w600,
                                                    color: AppColors.primaryColor,
                                                  ),
                                                ),
                                                // SizedBox(
                                                //     width:
                                                //         MediaQuery.of(context)
                                                //                 .size
                                                //                 .width /
                                                //             3.8),
                                                Visibility(
                                                  visible: false,
                                                  child: IconButton(
                                                    icon: Icon(Icons.download_sharp,
                                                        color: AppColors.primaryAccentColor),
                                                    tooltip: "Download Prescription",
                                                    onPressed: () async {
                                                      // AwesomeNotifications()
                                                      //     .cancelAll();
                                                      // if (logoUrl ==
                                                      //     'invalid accountId')
                                                      // {
                                                      bool permissionGrandted = false;
                                                      if (Platform.isAndroid) {
                                                        final deviceInfo =
                                                            await DeviceInfoPlugin().androidInfo;
                                                        Map<Permission, PermissionStatus> _status;
                                                        if (deviceInfo.version.sdkInt <= 32) {
                                                          _status =
                                                              await [Permission.storage].request();
                                                        } else {
                                                          _status = await [
                                                            Permission.photos,
                                                            Permission.videos
                                                          ].request();
                                                        }
                                                        _status.forEach((permission, status) {
                                                          if (status == PermissionStatus.granted) {
                                                            permissionGrandted = true;
                                                          }
                                                        });
                                                      } else {
                                                        permissionGrandted = true;
                                                      }
                                                      if (permissionGrandted) {
                                                        final status =
                                                            await Permission.storage.request();
                                                        if (status.isGranted) {
                                                          SharedPreferences prefs =
                                                              await SharedPreferences.getInstance();
                                                          prefs.setString(
                                                              "consultantNameFromHistorySummary",
                                                              consultantName);
                                                          prefs.setString(
                                                              "consultantEmailFromHistorySummary",
                                                              consultantEmail);
                                                          prefs.setString(
                                                              "consultantMobileFromHistorySummary",
                                                              consultantMobile);
                                                          prefs.setString(
                                                              "consultantEducationFromHistorySummary",
                                                              consultantEducation);
                                                          prefs.setString(
                                                              "consultantDescriptionFromHistorySummary",
                                                              consultantDescription);

                                                          prefs.setString(
                                                              "appointmentStartTimeFromHistorySummary",
                                                              appStartingTime);
                                                          prefs.setString(
                                                              "reasonForVisitFromHistorySummary",
                                                              reasonOfVisit);
                                                          prefs.setString(
                                                              "diagnosisFromHistorySummary",
                                                              diagnosis);
                                                          prefs.setString(
                                                              "instructionFromHistorySummary",
                                                              instruction);
                                                          prefs.setString(
                                                              "adviceFromHistorySummary",
                                                              adviceNotes);
                                                          prefs.setString(
                                                              "userFirstNameFromHistorySummary",
                                                              firstName);
                                                          prefs.setString(
                                                              "userLastNameFromHistorySummary",
                                                              lastName);
                                                          prefs.setString(
                                                              "userEmailFromHistorySummary", email);
                                                          prefs.setString(
                                                              "userContactFromHistorySummary",
                                                              mobileNumber);
                                                          prefs.setString("ageFromHistorySummary",
                                                              finalAge.toString());
                                                          prefs.setString(
                                                              "genderFromHistorySummary",
                                                              finalGender);

                                                          prefs.setString(
                                                              "useraddressFromHistory", address);
                                                          prefs.setString(
                                                              "userareaFromHistory", area);
                                                          prefs.setString(
                                                              "usercityFromHistory", city);
                                                          prefs.setString(
                                                              "userstateFromHistory", state);
                                                          prefs.setString(
                                                              "userpincodeFromHistory", pincode);

                                                          Get.snackbar(
                                                            '',
                                                            'Instructions will be saved in your mobile!',
                                                            backgroundColor:
                                                                AppColors.primaryAccentColor,
                                                            colorText: Colors.white,
                                                            duration: Duration(seconds: 5),
                                                            isDismissible: false,
                                                          );
                                                          new Future.delayed(
                                                              new Duration(seconds: 2), () {
                                                            genixPrescription(
                                                                context: context,
                                                                allergies: _allergies,
                                                                mobilenummber: mobileNumber,
                                                                footer: footerDetail,
                                                                showPdfNotification: true,
                                                                prescriptionNotes:
                                                                    _prescriptionNotes,
                                                                appointmentId: widget.appointmentId,
                                                                allergy: allergy,
                                                                prescription: prescription,
                                                                bmi: bmi,
                                                                weight: weight,
                                                                rmpid: rmpId,
                                                                notes: notes,
                                                                specality: speciality,
                                                                consultantSignature:
                                                                    consultantSignature,
                                                                genixDaignosis: genixDiagnosis,
                                                                genixRadiology: genixRadiology,
                                                                kisokCheckinHistory:
                                                                    kisokCheckinHistory,
                                                                genixLabTest: labTestList,
                                                                genixLabNotes: labNotes,
                                                                consultantAddress:
                                                                    consultantAddress,
                                                                logoUrl: Image.memory(
                                                                    base64Decode(_imageBase64)));
                                                          });
                                                        } else {
                                                          Get.snackbar('Storage Access Denied',
                                                              'Allow Storage permission to continue',
                                                              backgroundColor: Colors.red,
                                                              colorText: Colors.white,
                                                              duration: Duration(seconds: 5),
                                                              isDismissible: false,
                                                              mainButton: TextButton(
                                                                  onPressed: () async {
                                                                    await openAppSettings();
                                                                  },
                                                                  child: Text('Allow')));
                                                        }
                                                      }
                                                    },
                                                  ),
                                                ),
                                              ],
                                            ),
                                            Visibility(
                                              visible: prescription != null &&
                                                  prescription.length > 0 &&
                                                  prescription != "N/A",
                                              child: Column(
                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                  children: prescription != null &&
                                                          prescription.length > 0 &&
                                                          prescription != "N/A"
                                                      ? prescription
                                                          // dummy
                                                          .map<Widget>(
                                                            (e) => Padding(
                                                              padding: const EdgeInsets.all(8.0),
                                                              child: PrescriptionTile(
                                                                value: e,
                                                                index: (prescription.indexOf(e) + 1)
                                                                    .toString(),
                                                              ),
                                                            ),
                                                          )
                                                          .toList()
                                                      : dummy
                                                          .map((e) => Padding(
                                                                padding: const EdgeInsets.all(8),
                                                                child: PrescriptionTile(
                                                                    index: (dummy.indexOf(e) + 1)
                                                                        .toString(),
                                                                    value: e),
                                                              ))
                                                          .toList()),
                                            ),
                                            Visibility(
                                              ///in issue list 6.0.5
                                              ///request came to disabe the order medicine
                                              visible: false,
                                              // visible: logoUrl != null &&
                                              //     logoUrl != '' &&
                                              //     logoUrl !=
                                              //         'invalid accountId',
                                              child: Row(
                                                mainAxisAlignment: MainAxisAlignment.end,
                                                children: [
                                                  Container(
                                                    // width: ScUtil().setWidth(270),
                                                    child: ElevatedButton(
                                                      style: ElevatedButton.styleFrom(
                                                        shape: RoundedRectangleBorder(
                                                          borderRadius: BorderRadius.circular(20.0),
                                                        ),
                                                        backgroundColor: AppColors.primaryColor,
                                                      ),
                                                      child: Text('Order Medicine',
                                                          style: TextStyle(
                                                            fontSize: 16,
                                                          )),
                                                      onPressed: () {
                                                        showModalBottomSheet(
                                                            context: context,
                                                            backgroundColor: Colors.white,
                                                            shape: RoundedRectangleBorder(
                                                              borderRadius: BorderRadius.only(
                                                                  topLeft: Radius.circular(15.0),
                                                                  topRight: Radius.circular(15.0)),
                                                            ),
                                                            builder: (BuildContext context) {
                                                              return StatefulBuilder(builder:
                                                                  (BuildContext context,
                                                                      StateSetter mystate) {
                                                                return Column(
                                                                  crossAxisAlignment:
                                                                      CrossAxisAlignment.start,
                                                                  mainAxisSize: MainAxisSize.min,
                                                                  children: [
                                                                    Padding(
                                                                      padding:
                                                                          const EdgeInsets.all(8.0)
                                                                              .copyWith(left: 16),
                                                                      child: Text(
                                                                        'Share prescription ?',
                                                                        style: TextStyle(
                                                                            color: AppColors
                                                                                .appTextColor, //AppColors.primaryColor
                                                                            fontSize: 24,
                                                                            fontWeight:
                                                                                FontWeight.bold),
                                                                        textAlign: TextAlign.left,
                                                                      ),
                                                                    ),
                                                                    Divider(
                                                                      indent: 10,
                                                                      endIndent: 10,
                                                                      thickness: 2,
                                                                    ),
                                                                    Expanded(
                                                                      child: Align(
                                                                        alignment: Alignment.center,
                                                                        child: Padding(
                                                                          padding:
                                                                              const EdgeInsets.all(
                                                                                  8.0),
                                                                          child: logoUrl != null &&
                                                                                  logoUrl != ''
                                                                              ? Row(
                                                                                  mainAxisAlignment:
                                                                                      MainAxisAlignment
                                                                                          .center,
                                                                                  children: [
                                                                                    Card(
                                                                                      elevation: 0,
                                                                                      child:
                                                                                          Padding(
                                                                                        padding:
                                                                                            EdgeInsets.all(
                                                                                                10),
                                                                                        child: Image
                                                                                            .asset(
                                                                                          'assets/images/ihl-plus.png',
                                                                                        ),
                                                                                      ),
                                                                                    ),
                                                                                    // Image.asset(''),
                                                                                    Card(
                                                                                      elevation: 0,
                                                                                      child: Icon(
                                                                                        Icons
                                                                                            .send_sharp,
                                                                                        color: AppColors
                                                                                            .appItemTitleTextColor,
                                                                                        size: 35,
                                                                                      ),
                                                                                    ),
                                                                                    Card(
                                                                                      elevation: 0,
                                                                                      child: logoUrl ==
                                                                                              'https://indiahealthlink.com/affiliate_logo/ihl-plus.png'
                                                                                          ? Image
                                                                                              .network(
                                                                                              'https://dashboard.indiahealthlink.com/affiliate_logo/ihl-plus.png',
                                                                                            )
                                                                                          : Image
                                                                                              .network(
                                                                                              '$logoUrl',
                                                                                            ),
                                                                                    ),
                                                                                  ],
                                                                                )
                                                                              : Container(
                                                                                  height: 0,
                                                                                  width: 0,
                                                                                ),
                                                                          // Image
                                                                          //     .network(
                                                                          //   'https://i.postimg.cc/mrDDfxQT/Group-43.png',
                                                                          // ),
                                                                        ),
                                                                      ),
                                                                    ),
                                                                    Padding(
                                                                      padding: const EdgeInsets.all(
                                                                          10.0),
                                                                      child: RichText(
                                                                        textAlign: TextAlign.left,
                                                                        text: TextSpan(
                                                                          text:
                                                                              "By providing your consent to India Health Link (IHL) Pvt. Ltd to share your prescription and personal contact details to 1mg Technology Pvt Ltd in your own interest for your medicine order fulfillment as per the ",
                                                                          style: TextStyle(
                                                                              color: AppColors
                                                                                  .appTextColor, //AppColors.primaryColor
                                                                              fontSize: 14),
                                                                          children: [
                                                                            TextSpan(
                                                                              text:
                                                                                  "Terms & Conditions",
                                                                              style: TextStyle(
                                                                                  fontWeight:
                                                                                      FontWeight
                                                                                          .bold,
                                                                                  color:
                                                                                      Colors.blue,
                                                                                  decoration:
                                                                                      TextDecoration
                                                                                          .underline),
                                                                              recognizer:
                                                                                  TapGestureRecognizer()
                                                                                    ..onTap = () {
                                                                                      Get.dialog(
                                                                                          PolicyDialog(
                                                                                        title:
                                                                                            "Tele Consultation T & C",
                                                                                        mdFileName:
                                                                                            'TeleTOC.md',
                                                                                      ));
                                                                                    },
                                                                            ),
                                                                            TextSpan(text: " and "),
                                                                            TextSpan(
                                                                              text:
                                                                                  "Privacy Policy",
                                                                              style: TextStyle(
                                                                                  fontWeight:
                                                                                      FontWeight
                                                                                          .bold,
                                                                                  color:
                                                                                      Colors.blue,
                                                                                  decoration:
                                                                                      TextDecoration
                                                                                          .underline),
                                                                              recognizer:
                                                                                  TapGestureRecognizer()
                                                                                    ..onTap = () {
                                                                                      Get.dialog(
                                                                                          PolicyDialog(
                                                                                        title:
                                                                                            "Privacy Policy",
                                                                                        mdFileName:
                                                                                            'PrivacyPolicy.md',
                                                                                      ));
                                                                                    },
                                                                            ),
                                                                            TextSpan(
                                                                              text:
                                                                                  ", you will be able to avail the 'Order Medicine' services.",
                                                                              style: TextStyle(
                                                                                  color: AppColors
                                                                                      .appTextColor, //AppColors.primaryColor
                                                                                  fontSize: 14),
                                                                            ),
                                                                          ],
                                                                        ),
                                                                      ),
                                                                    ),
                                                                    CheckboxListTile(
                                                                      controlAffinity:
                                                                          ListTileControlAffinity
                                                                              .leading,
                                                                      value: isAgree,
                                                                      onChanged: (val) {
                                                                        mystate(() {
                                                                          isAgree = val;
                                                                          print(isAgree);
                                                                        });
                                                                      },

                                                                      title: Text(
                                                                        'I agree to the Terms and Condition for the service',
                                                                        style: TextStyle(
                                                                            color: AppColors
                                                                                .appTextColor,
                                                                            fontSize: 12),
                                                                      ),
                                                                      // isThreeLine: false,
                                                                      contentPadding:
                                                                          EdgeInsets.only(left: 16),
                                                                    ),
                                                                    Padding(
                                                                      padding:
                                                                          const EdgeInsets.all(8.0),
                                                                      child: Row(
                                                                        mainAxisAlignment:
                                                                            MainAxisAlignment
                                                                                .spaceEvenly,
                                                                        children: [
                                                                          ElevatedButton(
                                                                            style: ElevatedButton
                                                                                .styleFrom(
                                                                              shape:
                                                                                  RoundedRectangleBorder(
                                                                                borderRadius:
                                                                                    BorderRadius
                                                                                        .circular(
                                                                                            10.0),
                                                                                side: BorderSide(
                                                                                  color: isAgree
                                                                                      ? AppColors
                                                                                          .primaryColor
                                                                                      : Colors.grey,
                                                                                ),
                                                                              ),
                                                                              backgroundColor: isAgree
                                                                                  ? AppColors
                                                                                      .primaryColor
                                                                                  : Colors.grey,
                                                                            ),
                                                                            child: Text(
                                                                              'Share',
                                                                              style: TextStyle(
                                                                                  color:
                                                                                      Colors.white),
                                                                            ),
                                                                            onPressed: isAgree
                                                                                ? () {
                                                                                    sendPrescriptionTo1MG();
                                                                                    Get.close(1);
                                                                                  }
                                                                                : null,
                                                                          ),
                                                                          // SizedBox(width: 10.0),
                                                                          ElevatedButton(
                                                                            style: ElevatedButton
                                                                                .styleFrom(
                                                                              shape:
                                                                                  RoundedRectangleBorder(
                                                                                borderRadius:
                                                                                    BorderRadius
                                                                                        .circular(
                                                                                            10.0),
                                                                              ),
                                                                              backgroundColor:
                                                                                  AppColors
                                                                                      .primaryColor,
                                                                            ),
                                                                            child: Text(
                                                                              'Cancel',
                                                                              style: TextStyle(
                                                                                  color:
                                                                                      Colors.white),
                                                                            ),
                                                                            onPressed: () {
                                                                              Navigator.of(context)
                                                                                  .pop();
                                                                            },
                                                                          ),
                                                                        ],
                                                                      ),
                                                                    ),
                                                                    SizedBox(height: 20),
                                                                  ],
                                                                );
                                                              });
                                                            });
                                                      },
                                                    ),
                                                  ),
                                                ],
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    ),
                                  ),

                                  //instruction
                                  Visibility(
                                    visible: vendorName != "GENIX" &&
                                        (diagnosis != "" && adviceNotes != "") &&
                                        (diagnosis != null && adviceNotes != null) &&
                                        (diagnosis != "null" && adviceNotes != "null"),
                                    child: Card(
                                      margin: EdgeInsets.all(7),
                                      color: AppColors.cardColor,
                                      shadowColor: FitnessAppTheme.grey.withOpacity(0.2),
                                      elevation: 2,
                                      borderOnForeground: true,
                                      shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.all(
                                            Radius.circular(4),
                                          ),
                                          side: BorderSide(
                                            width: 1,
                                            color: FitnessAppTheme.nearlyWhite,
                                          )),
                                      child: Column(
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        children: [
                                          Row(
                                            crossAxisAlignment: CrossAxisAlignment.start,
                                            children: <Widget>[
                                              Padding(
                                                padding: const EdgeInsets.only(left: 4.0, top: 8),
                                                child: Text(
                                                  'Consultant Instructions :',
                                                  style: TextStyle(
                                                    fontSize: 20.0,
                                                    fontWeight: FontWeight.w600,
                                                    color: AppColors.primaryColor,
                                                  ),
                                                ),
                                              ),
                                              // SizedBox(width: 4.0),
                                              IconButton(
                                                  icon: Icon(Icons.download_sharp,
                                                      color: AppColors.primaryAccentColor),
                                                  tooltip: "Download Prescription",
                                                  onPressed: () async {
                                                    bool permissionGrandted = false;
                                                    if (Platform.isAndroid) {
                                                      final deviceInfo =
                                                          await DeviceInfoPlugin().androidInfo;
                                                      Map<Permission, PermissionStatus> _status;
                                                      if (deviceInfo.version.sdkInt <= 32) {
                                                        _status =
                                                            await [Permission.storage].request();
                                                      } else {
                                                        _status = await [
                                                          Permission.photos,
                                                          Permission.videos
                                                        ].request();
                                                      }
                                                      _status.forEach((permission, status) {
                                                        if (status == PermissionStatus.granted) {
                                                          permissionGrandted = true;
                                                        }
                                                      });
                                                    } else {
                                                      permissionGrandted = true;
                                                    }
                                                    if (permissionGrandted) {
                                                      SharedPreferences prefs =
                                                          await SharedPreferences.getInstance();
                                                      prefs.setString(
                                                          "consultantNameFromHistorySummary",
                                                          consultantName);
                                                      prefs.setString("specialtyFromHistorySummary",
                                                          speciality);
                                                      prefs.setString(
                                                          "appointmentStartTimeFromHistorySummary",
                                                          appStartingTime);
                                                      prefs.setString(
                                                          "reasonForVisitFromHistorySummary",
                                                          reasonOfVisit);
                                                      prefs.setString(
                                                          "diagnosisFromHistorySummary", diagnosis);
                                                      prefs.setString(
                                                          "instructionFromHistorySummary",
                                                          instruction);
                                                      prefs.setString(
                                                          "adviceFromHistorySummary", adviceNotes);
                                                      prefs.setString(
                                                          "userFirstNameFromHistorySummary",
                                                          firstName);
                                                      prefs.setString(
                                                          "userLastNameFromHistorySummary",
                                                          lastName);
                                                      prefs.setString(
                                                          "userEmailFromHistorySummary", email);
                                                      prefs.setString(
                                                          "userContactFromHistorySummary",
                                                          mobileNumber);
                                                      prefs.setString("ageFromHistorySummary",
                                                          finalAge.toString());
                                                      prefs.setString(
                                                          "genderFromHistorySummary", finalGender);
                                                      prefs.setString(
                                                          weight, 'weightFromHistorySummary');
                                                      prefs.setString(
                                                          bmi.toString(), 'bmiFromHistorySummary');

                                                      Get.snackbar(
                                                        '',
                                                        'Instructions will be saved in your mobile!',
                                                        backgroundColor:
                                                            AppColors.primaryAccentColor,
                                                        colorText: Colors.white,
                                                        duration: Duration(seconds: 5),
                                                        isDismissible: false,
                                                      );
                                                      new Future.delayed(new Duration(seconds: 2),
                                                          () {
                                                        instructionsView(context);
                                                      });
                                                    } else {
                                                      Get.snackbar('Storage Access Denied',
                                                          'Allow Storage permission to continue',
                                                          backgroundColor: Colors.red,
                                                          colorText: Colors.white,
                                                          duration: Duration(seconds: 5),
                                                          isDismissible: false,
                                                          mainButton: TextButton(
                                                              onPressed: () async {
                                                                await openAppSettings();
                                                              },
                                                              child: Text('Allow')));
                                                    }
                                                  }),
                                            ],
                                          ),
                                          Padding(
                                            padding: const EdgeInsets.only(left: 6.0),
                                            child: Column(
                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                              crossAxisAlignment: CrossAxisAlignment.start,
                                              children: <Widget>[
                                                // Text(
                                                //   'Consultant Instructions :',
                                                //   style: TextStyle(
                                                //     fontSize: 20.0,
                                                //     fontWeight: FontWeight.bold,
                                                //     color: AppColors.primaryColor,
                                                //   ),
                                                // ),
                                                // SizedBox(height: 10.0),
                                                Text(
                                                  'Instruction :',
                                                  style: TextStyle(
                                                    fontWeight: FontWeight.bold,
                                                    color: CardColors.titleColor,
                                                  ),
                                                ),
                                                Text(
                                                  instruction ?? "N/A",
                                                  textAlign: TextAlign.start,
                                                  style: TextStyle(
                                                      color: CardColors.textColor, height: 2),
                                                ),
                                                SizedBox(height: 10.0),
                                                Text(
                                                  'Diagnosis :',
                                                  style: TextStyle(
                                                    fontWeight: FontWeight.bold,
                                                    color: CardColors.titleColor,
                                                  ),
                                                ),
                                                Text(
                                                  diagnosis ?? "N/A",
                                                  textAlign: TextAlign.start,
                                                  style: TextStyle(
                                                      color: CardColors.textColor, height: 2),
                                                ),
                                                SizedBox(height: 10.0),
                                                Text(
                                                  'Consultant advice notes :',
                                                  style: TextStyle(
                                                    fontWeight: FontWeight.bold,
                                                    color: CardColors.titleColor,
                                                  ),
                                                ),
                                                Text(
                                                  adviceNotes ?? "N/A",
                                                  textAlign: TextAlign.start,
                                                  style: TextStyle(
                                                      color: CardColors.textColor, height: 2),
                                                ),
                                                SizedBox(
                                                  height: 10.0,
                                                ),
                                              ],
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),

                                  //notes in medicine
                                  Visibility(
                                    visible: notes != null && notes.length > 0,
                                    child: Card(
                                      margin: EdgeInsets.all(7),
                                      color: AppColors.cardColor,
                                      shadowColor: FitnessAppTheme.grey.withOpacity(0.2),
                                      elevation: 2,
                                      borderOnForeground: true,
                                      shape: RoundedRectangleBorder(
                                          borderRadius: BorderRadius.all(
                                            Radius.circular(4),
                                          ),
                                          side: BorderSide(
                                            width: 1,
                                            color: FitnessAppTheme.nearlyWhite,
                                          )),
                                      child: Column(
                                        mainAxisAlignment: MainAxisAlignment.start,
                                        crossAxisAlignment: CrossAxisAlignment.start,
                                        children: [
                                          Row(
                                            crossAxisAlignment: CrossAxisAlignment.start,
                                            children: <Widget>[
                                              Padding(
                                                padding: const EdgeInsets.all(8.0),
                                                child: Text(
                                                  'Notes',
                                                  style: TextStyle(
                                                    fontSize: 20.0,
                                                    fontWeight: FontWeight.w600,
                                                    color: AppColors.primaryColor,
                                                  ),
                                                ),
                                              ),
                                            ],
                                          ),
                                          notes != null
                                              ? Column(
                                                  mainAxisAlignment: MainAxisAlignment.start,
                                                  crossAxisAlignment: CrossAxisAlignment.start,
                                                  children: notes
                                                      .map<Widget>(
                                                        (e) => Container(
                                                            padding: EdgeInsets.all(10),
                                                            child: Text(
                                                              notes != null && notes.length > 0
                                                                  ? e.toString()
                                                                  : '',
                                                              textAlign: TextAlign.left,
                                                            )),
                                                      )
                                                      .toList())
                                              : Container(),
                                        ],
                                      ),
                                    ),
                                  ),

                                  ///Files
                                  ///commented on 310 Dec
                                  Visibility(
                                    visible: medFiles != null ? medFiles.length > 0 : false,
                                    child: filesCard(),
                                  ),

                                  //order medicine
                                  // Visibility(
                                  //   visible: prescription != null &&
                                  //       prescription.length > 0 &&
                                  //       prescription != "N/A",
                                  //   // appointmentStatus == "Completed" ? true : false,
                                  //   child: ElevatedButton(
                                  //     style: ElevatedButton.styleFrom(
                                  //       shape: RoundedRectangleBorder(
                                  //         borderRadius:
                                  //             BorderRadius.circular(20.0),
                                  //       ),
                                  //       primary: AppColors.primaryColor,
                                  //     ),
                                  //     child: Text('Order Medicine',
                                  //         style: TextStyle(
                                  //           fontSize: 16,
                                  //         )),
                                  //     onPressed: () {
                                  //       showModalBottomSheet(
                                  //           context: context,
                                  //           backgroundColor: Colors.white,
                                  //           shape: RoundedRectangleBorder(
                                  //             borderRadius: BorderRadius.only(
                                  //                 topLeft:
                                  //                     Radius.circular(15.0),
                                  //                 topRight:
                                  //                     Radius.circular(15.0)),
                                  //           ),
                                  //           builder: (BuildContext context) {
                                  //             return StatefulBuilder(builder:
                                  //                 (BuildContext context,
                                  //                     StateSetter mystate) {
                                  //               return Column(
                                  //                 crossAxisAlignment:
                                  //                     CrossAxisAlignment.start,
                                  //                 mainAxisSize:
                                  //                     MainAxisSize.min,
                                  //                 children: [
                                  //                   Padding(
                                  //                     padding: const EdgeInsets
                                  //                             .all(8.0)
                                  //                         .copyWith(left: 16),
                                  //                     child: Text(
                                  //                       'Share prescription ?',
                                  //                       style: TextStyle(
                                  //                           color: AppColors
                                  //                               .appTextColor, //AppColors.primaryColor
                                  //                           fontSize: 24,
                                  //                           fontWeight:
                                  //                               FontWeight
                                  //                                   .bold),
                                  //                       textAlign:
                                  //                           TextAlign.left,
                                  //                     ),
                                  //                   ),
                                  //                   Divider(
                                  //                     indent: 10,
                                  //                     endIndent: 10,
                                  //                     thickness: 2,
                                  //                   ),
                                  //                   Expanded(
                                  //                     child: Align(
                                  //                       alignment:
                                  //                           Alignment.center,
                                  //                       child: Padding(
                                  //                         padding:
                                  //                             const EdgeInsets
                                  //                                 .all(8.0),
                                  //                         child: Image.network(
                                  //                           'https://i.postimg.cc/mrDDfxQT/Group-43.png',
                                  //                         ),
                                  //                       ),
                                  //                     ),
                                  //                   ),
                                  //                   Padding(
                                  //                     padding:
                                  //                         const EdgeInsets.all(
                                  //                             10.0),
                                  //                     child: RichText(
                                  //                       textAlign:
                                  //                           TextAlign.left,
                                  //                       text: TextSpan(
                                  //                         text:
                                  //                             "By providing your consent to India Health Link (IHL) Pvt. Ltd to share your prescription and personal contact details to 1mg Technology Pvt Ltd in your own interest for your medicine order fulfillment as per the ",
                                  //                         style: TextStyle(
                                  //                             color: AppColors
                                  //                                 .appTextColor, //AppColors.primaryColor
                                  //                             fontSize: 14),
                                  //                         children: [
                                  //                           TextSpan(
                                  //                             text:
                                  //                                 "Terms & Conditions",
                                  //                             style: TextStyle(
                                  //                                 fontWeight:
                                  //                                     FontWeight
                                  //                                         .bold,
                                  //                                 color: Colors
                                  //                                     .blue,
                                  //                                 decoration:
                                  //                                     TextDecoration
                                  //                                         .underline),
                                  //                             recognizer:
                                  //                                 TapGestureRecognizer()
                                  //                                   ..onTap =
                                  //                                       () {
                                  //                                     Get.dialog(
                                  //                                         PolicyDialog(
                                  //                                       title:
                                  //                                           "Tele Consultation T & C",
                                  //                                       mdFileName:
                                  //                                           'TeleTOC.md',
                                  //                                     ));
                                  //                                   },
                                  //                           ),
                                  //                           TextSpan(
                                  //                               text: " and "),
                                  //                           TextSpan(
                                  //                             text:
                                  //                                 "Privacy Policy",
                                  //                             style: TextStyle(
                                  //                                 fontWeight:
                                  //                                     FontWeight
                                  //                                         .bold,
                                  //                                 color: Colors
                                  //                                     .blue,
                                  //                                 decoration:
                                  //                                     TextDecoration
                                  //                                         .underline),
                                  //                             recognizer:
                                  //                                 TapGestureRecognizer()
                                  //                                   ..onTap =
                                  //                                       () {
                                  //                                     Get.dialog(
                                  //                                         PolicyDialog(
                                  //                                       title:
                                  //                                           "Privacy Policy",
                                  //                                       mdFileName:
                                  //                                           'PrivacyPolicy.md',
                                  //                                     ));
                                  //                                   },
                                  //                           ),
                                  //                           TextSpan(
                                  //                             text:
                                  //                                 ", you will be able to avail the 'Order Medicine' services.",
                                  //                             style: TextStyle(
                                  //                                 color: AppColors
                                  //                                     .appTextColor, //AppColors.primaryColor
                                  //                                 fontSize: 14),
                                  //                           ),
                                  //                         ],
                                  //                       ),
                                  //                     ),
                                  //                   ),
                                  //                   CheckboxListTile(
                                  //                     controlAffinity:
                                  //                         ListTileControlAffinity
                                  //                             .leading,
                                  //                     value: isAgree,
                                  //                     onChanged: (val) {
                                  //                       mystate(() {
                                  //                         isAgree = val;
                                  //                         print(isAgree);
                                  //                       });
                                  //                     },
                                  //
                                  //                     title: Text(
                                  //                       'I agree to the Terms and Condition for the service',
                                  //                       style: TextStyle(
                                  //                           color: AppColors
                                  //                               .appTextColor,
                                  //                           fontSize: 12),
                                  //                     ),
                                  //                     // isThreeLine: false,
                                  //                     contentPadding:
                                  //                         EdgeInsets.only(
                                  //                             left: 16),
                                  //                   ),
                                  //                   Padding(
                                  //                     padding:
                                  //                         const EdgeInsets.all(
                                  //                             8.0),
                                  //                     child: Row(
                                  //                       mainAxisAlignment:
                                  //                           MainAxisAlignment
                                  //                               .spaceEvenly,
                                  //                       children: [
                                  //                         ElevatedButton(
                                  //                           style:
                                  //                               ElevatedButton
                                  //                                   .styleFrom(
                                  //                             shape:
                                  //                                 RoundedRectangleBorder(
                                  //                               borderRadius:
                                  //                                   BorderRadius
                                  //                                       .circular(
                                  //                                           10.0),
                                  //                               side:
                                  //                                   BorderSide(
                                  //                                 color: isAgree
                                  //                                     ? Color(
                                  //                                         0xff4393cf)
                                  //                                     : Colors
                                  //                                         .grey,
                                  //                               ),
                                  //                             ),
                                  //                             primary: isAgree
                                  //                                 ? Color(
                                  //                                     0xff4393cf)
                                  //                                 : Colors.grey,
                                  //                           ),
                                  //                           child: Text(
                                  //                             'Share',
                                  //                             style: TextStyle(
                                  //                                 color: Colors
                                  //                                     .white),
                                  //                           ),
                                  //                           onPressed: isAgree
                                  //                               ? () {
                                  //                                   sendPrescriptionTo1MG();
                                  //                                   Get.close(
                                  //                                       1);
                                  //                                 }
                                  //                               : null,
                                  //                         ),
                                  //                         // SizedBox(width: 10.0),
                                  //                         ElevatedButton(
                                  //                           style:
                                  //                               ElevatedButton
                                  //                                   .styleFrom(
                                  //                             shape:
                                  //                                 RoundedRectangleBorder(
                                  //                               borderRadius:
                                  //                                   BorderRadius
                                  //                                       .circular(
                                  //                                           10.0),
                                  //                             ),
                                  //                             primary: Color(
                                  //                                 0xff4393CF),
                                  //                           ),
                                  //                           child: Text(
                                  //                             'Cancel',
                                  //                             style: TextStyle(
                                  //                                 color: Colors
                                  //                                     .white),
                                  //                           ),
                                  //                           onPressed: () {
                                  //                             Navigator.of(
                                  //                                     context)
                                  //                                 .pop();
                                  //                           },
                                  //                         ),
                                  //                       ],
                                  //                     ),
                                  //                   ),
                                  //                   SizedBox(height: 20),
                                  //                 ],
                                  //               );
                                  //             });
                                  //           });
                                  //     },
                                  //   ),
                                  // ),
                                  //report
                                  Visibility(
                                    visible: (vendorName == 'GENIX') &&
                                            ((prescription != null &&
                                                    prescription.length > 0 &&
                                                    prescription != "N/A") ||
                                                (genixRadiology != null &&
                                                    genixRadiology.length > 0 &&
                                                    genixRadiology != "N/A") ||
                                                (labTestList != null &&
                                                    labTestList.length > 0 &&
                                                    labTestList != "N/A"))
                                        ? true
                                        : false,
                                    child: ElevatedButton(
                                        style: ElevatedButton.styleFrom(
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(20.0),
                                          ),
                                          backgroundColor: AppColors.primaryColor,
                                        ),
                                        child: Text('Report',
                                            style: TextStyle(
                                              fontSize: 16,
                                            )),
                                        onPressed: () async {
                                          bool permissionGrandted = false;
                                          if (Platform.isAndroid) {
                                            final deviceInfo = await DeviceInfoPlugin().androidInfo;
                                            Map<Permission, PermissionStatus> _status;
                                            if (deviceInfo.version.sdkInt <= 32) {
                                              _status = await [Permission.storage].request();
                                            } else {
                                              _status = await [Permission.photos, Permission.videos]
                                                  .request();
                                            }
                                            _status.forEach((permission, status) {
                                              if (status == PermissionStatus.granted) {
                                                permissionGrandted = true;
                                              }
                                            });
                                          } else {
                                            permissionGrandted = true;
                                          }
                                          if (permissionGrandted) {
                                            SharedPreferences prefs =
                                                await SharedPreferences.getInstance();
                                            prefs.setString(
                                                "consultantNameFromHistorySummary", consultantName);
                                            prefs.setString("consultantEmailFromHistorySummary",
                                                consultantEmail);
                                            prefs.setString("consultantMobileFromHistorySummary",
                                                consultantMobile);
                                            prefs.setString("consultantEducationFromHistorySummary",
                                                consultantEducation);
                                            prefs.setString(
                                                "consultantDescriptionFromHistorySummary",
                                                consultantDescription);

                                            prefs.setString(
                                                "appointmentStartTimeFromHistorySummary",
                                                appStartingTime);
                                            prefs.setString(
                                                "reasonForVisitFromHistorySummary", reasonOfVisit);
                                            prefs.setString(
                                                "diagnosisFromHistorySummary", diagnosis);
                                            prefs.setString(
                                                "instructionFromHistorySummary", instruction);
                                            prefs.setString(
                                                "adviceFromHistorySummary", adviceNotes);
                                            prefs.setString(
                                                "userFirstNameFromHistorySummary", firstName);
                                            prefs.setString(
                                                "userLastNameFromHistorySummary", lastName);
                                            prefs.setString("userEmailFromHistorySummary", email);
                                            prefs.setString(
                                                "userContactFromHistorySummary", mobileNumber);
                                            prefs.setString(
                                                "ageFromHistorySummary", finalAge.toString());
                                            prefs.setString(
                                                "genderFromHistorySummary", finalGender);

                                            prefs.setString("useraddressFromHistory", address);
                                            prefs.setString("userareaFromHistory", area);
                                            prefs.setString("usercityFromHistory", city);
                                            prefs.setString("userstateFromHistory", state);
                                            prefs.setString("userpincodeFromHistory", pincode);

                                            Get.snackbar(
                                              '',
                                              'Instructions will be saved in your mobile!',
                                              backgroundColor: AppColors.primaryAccentColor,
                                              colorText: Colors.white,
                                              duration: Duration(seconds: 5),
                                              isDismissible: false,
                                            );
                                            new Future.delayed(new Duration(seconds: 2), () {
                                              print('footerDetail $footerDetail');
                                              genixPrescription(
                                                  context: context,
                                                  allergies: _allergies,
                                                  mobilenummber: mobileNumber,
                                                  showPdfNotification: true,
                                                  footer: footerDetail,
                                                  prescriptionNotes: _prescriptionNotes,
                                                  appointmentId: widget.appointmentId,
                                                  allergy: allergy,
                                                  prescription: prescription,
                                                  bmi: bmi,
                                                  weight: weight,
                                                  rmpid: rmpId,
                                                  notes: notes,
                                                  specality: speciality,
                                                  consultantSignature: consultantSignature,
                                                  genixDaignosis: genixDiagnosis,
                                                  genixRadiology: genixRadiology,
                                                  // kisokCheckinHistory: [
                                                  //   {
                                                  //     'type': 'Weight',
                                                  //     'value': '52.5dudy',
                                                  //     'unit': 'kg',
                                                  //   },
                                                  //   {
                                                  //     'type': 'Height',
                                                  //     'value': '172',
                                                  //     'unit': 'cm',
                                                  //   },
                                                  //   {
                                                  //     'type': 'hello',
                                                  //     'value': '123',
                                                  //     'unit': 'gh',
                                                  //   },
                                                  //   {
                                                  //     'type': 'hello1',
                                                  //     'value': '48.l',
                                                  //     'unit': 'lh',
                                                  //   },
                                                  //   {
                                                  //     'type': 'hello15',
                                                  //     'value': '45.l',
                                                  //     'unit': 'kg',
                                                  //   },
                                                  //   {
                                                  //     'type': 'hello71',
                                                  //     'value': '47.7',
                                                  //     'unit': 'ty',
                                                  //   },
                                                  //   {
                                                  //     'type': 'hello871',
                                                  //     'value': '458',
                                                  //     'unit': 'fi',
                                                  //   },
                                                  // ],
                                                  kisokCheckinHistory: kisokCheckinHistory,
                                                  genixLabTest: labTestList,
                                                  genixLabNotes: labNotes,
                                                  consultantAddress: consultantAddress,
                                                  logoUrl:
                                                      Image.memory(base64Decode(_imageBase64)));
                                            });
                                          } else {
                                            Get.snackbar('Storage Access Denied',
                                                'Allow Storage permission to continue',
                                                backgroundColor: Colors.red,
                                                colorText: Colors.white,
                                                duration: Duration(seconds: 5),
                                                isDismissible: false,
                                                mainButton: TextButton(
                                                    onPressed: () async {
                                                      await openAppSettings();
                                                    },
                                                    child: Text('Allow')));
                                          }
                                        }),
                                  ),
                                  //invoice
                                  Visibility(
                                    visible: consultationFees != "0" ? true : false,
                                    child: ElevatedButton(
                                        style: ElevatedButton.styleFrom(
                                          shape: RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(20.0),
                                          ),
                                          backgroundColor: AppColors.primaryColor,
                                        ),
                                        child: Text('Invoice',
                                            style: TextStyle(
                                              fontSize: 16,
                                            )),
                                        onPressed: () async {
                                          // AwesomeNotifications().cancelAll();
                                          bool permissionGrandted = false;
                                          if (Platform.isAndroid) {
                                            final deviceInfo = await DeviceInfoPlugin().androidInfo;
                                            Map<Permission, PermissionStatus> _status;
                                            if (deviceInfo.version.sdkInt <= 32) {
                                              _status = await [Permission.storage].request();
                                            } else {
                                              _status = await [Permission.photos, Permission.videos]
                                                  .request();
                                            }
                                            _status.forEach((permission, status) {
                                              if (status == PermissionStatus.granted) {
                                                permissionGrandted = true;
                                              }
                                            });
                                          } else {
                                            permissionGrandted = true;
                                          }
                                          if (permissionGrandted) {
                                            SharedPreferences prefs =
                                                await SharedPreferences.getInstance();
                                            prefs.setString(
                                                "consultantNameFromHistory", consultantName);
                                            prefs.setString(
                                                "appointmentStartTimeFromHistory", appStartingTime);
                                            prefs.setString(
                                                "appointmentEndTimeFromHistory", appEndTime);
                                            prefs.setString(
                                                "consultationFeesFromHistory", consultationFees);
                                            prefs.setString(
                                                "modeOfPaymentFromHistory", modeOfPayment);
                                            prefs.setString("userFirstNameFromHistory", firstName);
                                            prefs.setString("userLastNameFromHistory", lastName);
                                            prefs.setString("userEmailFromHistory", email);
                                            prefs.setString("userContactFromHistory", mobileNumber);
                                            prefs.setString(
                                                "appointIdFromHistory", widget.appointmentId);
                                            prefs.setString("useraddressFromHistory", address);
                                            prefs.setString("userareaFromHistory", area);
                                            prefs.setString("usercityFromHistory", city);
                                            prefs.setString("userstateFromHistory", state);
                                            prefs.setString("userpincodeFromHistory", pincode);
                                            Get.snackbar(
                                              '',
                                              'Invoice will be saved in your mobile!',
                                              backgroundColor: AppColors.primaryAccentColor,
                                              colorText: Colors.white,
                                              duration: Duration(seconds: 5),
                                              isDismissible: false,
                                            );
                                            new Future.delayed(new Duration(seconds: 2), () {
                                              billView(context, invoiceNumber, true,
                                                  invoiceModel: invoice);
                                            });
                                          } else {
                                            Get.snackbar('Storage Access Denied',
                                                'Allow Storage permission to continue',
                                                backgroundColor: Colors.red,
                                                colorText: Colors.white,
                                                duration: Duration(seconds: 5),
                                                isDismissible: false,
                                                mainButton: TextButton(
                                                    onPressed: () async {
                                                      await openAppSettings();
                                                    },
                                                    child: Text('Allow')));
                                          }
                                        }),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
      ),
    );
  }

  Widget filesCard() {
    return Card(
      margin: EdgeInsets.all(7),
      color: AppColors.cardColor,
      shadowColor: FitnessAppTheme.grey.withOpacity(0.2),
      elevation: 2,
      borderOnForeground: true,
      shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.all(
            Radius.circular(4),
          ),
          side: BorderSide(
            width: 1,
            color: FitnessAppTheme.nearlyWhite,
          )),
      //
      // shape: RoundedRectangleBorder(
      //   borderRadius: BorderRadius.circular(15.0),
      // ),
      // color: Color(0xfff4f6fa),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Text(
              "Shared Medical Report" + ':',
              style: TextStyle(
                fontSize: 20.0,
                fontWeight: FontWeight.w600,
                color: AppColors.primaryColor,
              ),
            ),
          ),
          Container(
            height: medFiles != null
                ? (medFiles.length > 3
                    ? 400
                    : medFiles.length == 3
                        ? 290
                        : medFiles.length == 2
                            ? 180
                            : 87)
                : 1,
            child: ListView.builder(
              itemCount: medFiles != null ? medFiles.length : 0,
              itemBuilder: (context, index) {
                return Column(
                  children: <Widget>[
                    ListTile(
                      leading: medFiles[index]['document_link'].substring(
                                      medFiles[index]['document_link'].lastIndexOf(".") + 1) ==
                                  'jpg' ||
                              medFiles[index]['document_link'].substring(
                                      medFiles[index]['document_link'].lastIndexOf(".") + 1) ==
                                  'png'
                          ? Icon(Icons.image)
                          : Icon(Icons.insert_drive_file),
                      // Icon(Icons.insert_drive_file),
                      title: Text("${medFiles[index]['document_name']}" ?? "N/A"),
                      subtitle: Text(
                          "${camelize(medFiles[index]['document_type'].replaceAll('_', ' '))}" ??
                              "N/A"),
                      // subtitle: Text("1.9 MB"),
                      // trailing: IconButton(
                      //   icon: Icon(Icons.download),
                      //   onPressed: () {
                      //     //call the download api
                      //     MedicalFilesApi.download(
                      //         medFiles[index]['document_name'],
                      //         medFiles[index]['document_link']);
                      //   },
                      // ),
                      onTap: () async {
                        print(medFiles[index]['document_link']);
                        // if(filesData[index]['document_link'].contains('pdf')){
                        await Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => PdfView(
                              medFiles[index]['document_link'],
                              medFiles[index],
                              ihlUserId,
                              showExtraButton: false,
                            ),
                          ),
                        );
                      },
                      // checkboxTile(medFiles[index]['document_id']),
                    ),
                    SizedBox(
                      height: 5.0,
                    ),
                    Divider(
                      thickness: 1.4,
                      height: 10.0,
                      indent: 5.0,
                      endIndent: 5.0,
                    ),
                  ],
                );
              },
            ),
          ),
          // Column(
          //   children: <Widget>[
          //     ListTile(
          //       leading: Icon(Icons.insert_drive_file),
          //       title: Text("My Scan Report.pdf"),
          //       subtitle: Text("1.9 MB"),
          //       trailing: checkboxTile('1'),
          //     ),
          //     SizedBox(
          //       height: 5.0,
          //     ),
          //     Divider(
          //       thickness: 2.0,
          //       height: 10.0,
          //       indent: 5.0,
          //     ),
          //     ListTile(
          //       leading: Icon(Icons.insert_drive_file),
          //       title: Text("My Blood Report.pdf"),
          //       subtitle: Text("1.6 MB"),
          //       trailing: checkboxTile('2'),
          //     ),
          //     SizedBox(
          //       height: 5.0,
          //     ),
          //     Divider(
          //       thickness: 2.0,
          //       height: 10.0,
          //       indent: 5.0,
          //     ),
          //     ListTile(
          //       leading: Icon(Icons.insert_drive_file),
          //       title: Text("My X-ray Report.pdf"),
          //       subtitle: Text("1.9 MB"),
          //       trailing: checkboxTile('3'),
          //     )
          //   ],
          // ),
        ],
      ),
    );
  }
}

// ignore: must_be_immutable
class PrescriptionTile extends StatelessWidget {
  Map value;
  var index;
  PrescriptionTile({Key key, this.value, this.index}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SizedBox(height: 10.0),
        Text(
          '$index' + '. Medicine Name :',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: CardColors.titleColor,
          ),
        ),
        Text(
          value["drug_name"] ?? '', //?? "N/A",
          style: TextStyle(color: CardColors.textColor, height: 2),
        ),
        SizedBox(height: 10.0),
        Text(
          'Frequency:',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: CardColors.titleColor,
          ),
        ),
        Text(
          value['SIG'] ?? '', //?? "N/A",
          style: TextStyle(color: CardColors.textColor, height: 2),
        ),
        Text(
          'Days:',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: CardColors.titleColor,
          ),
        ),
        Text(
          value["days"] ?? '', //?? "N/A",
          style: TextStyle(color: CardColors.textColor, height: 2),
        ),
        value["direction_of_use"] != null &&
                value["direction_of_use"] != "N/A" &&
                value["direction_of_use"] != ""
            ? Text(
                'Direction Of Use:',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: CardColors.titleColor,
                ),
              )
            : Container(),
        value["direction_of_use"] != null &&
                value["direction_of_use"] != "N/A" &&
                value["direction_of_use"] != ""
            ? Text(
                value["direction_of_use"] ?? '', //?? "N/A",
                style: TextStyle(color: CardColors.textColor, height: 2),
              )
            : Container(),
      ],
    );
  }
}

///Genix Radiology

// ignore: must_be_immutable
class RadiologyTile extends StatelessWidget {
  Map value;
  var index;
  RadiologyTile({Key key, this.value, this.index}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SizedBox(height: 10.0),
        Text(
          '$index' + '. Test Name :',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: CardColors.titleColor,
          ),
        ),
        Text(
          value.containsKey("test_name") ? value["test_name"] ?? '' : "N/A", //?? "N/A",
          style: TextStyle(color: CardColors.textColor, height: 2),
        ),
        SizedBox(height: 10.0),
        Text(
          'Prescribed Date:',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: CardColors.titleColor,
          ),
        ),
        Text(
          value['test_prescribed_on'] ?? '', //?? "N/A",
          style: TextStyle(color: CardColors.textColor, height: 2),
        ),
        Text(
          'Notes :',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: CardColors.titleColor,
          ),
        ),
        Text(
          value["radiology_note"] ?? '', //?? "N/A",
          style: TextStyle(color: CardColors.textColor, height: 2),
        ),
        value["prescribed_by"] != null &&
                value["prescribed_by"] != "N/A" &&
                value["prescribed_by"] != ""
            ? Text(
                'Prescribed By:',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: CardColors.titleColor,
                ),
              )
            : Container(),
        value["prescribed_by"] != null &&
                value["prescribed_by"] != "N/A" &&
                value["prescribed_by"] != ""
            ? Text(
                value["prescribed_by"] ?? '', //?? "N/A",
                style: TextStyle(color: CardColors.textColor, height: 2),
              )
            : Container(),
      ],
    );
  }
}

///Genix Daignosis

// ignore: must_be_immutable
class DaignosisTile extends StatelessWidget {
  Map value;
  var index;
  DaignosisTile({Key key, this.value, this.index}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Visibility(
      visible: value['diagnosis_name'] != null && value['diagnosis_name'] != '',
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(height: 5.0),
          Text(
            '$index' + '. Diagnosis Name :',
            style: TextStyle(
              fontWeight: FontWeight.bold,
              color: CardColors.titleColor,
            ),
          ),
          Text(
            value["diagnosis_name"] ?? '', //?? "N/A",
            style: TextStyle(color: CardColors.textColor, height: 2),
          ),
          Visibility(
              visible: value['diagnosis_note'] != null && value['diagnosis_note'] != '',
              child: SizedBox(height: 10.0)),
          Visibility(
            visible: value['diagnosis_note'] != null && value['diagnosis_note'] != '',
            child: Text(
              'Diagnosis Note:',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: CardColors.titleColor,
              ),
            ),
          ),
          Visibility(
            visible: value['diagnosis_note'] != null && value['diagnosis_note'] != '',
            child: Text(
              value['diagnosis_note'], //?? "N/A",
              style: TextStyle(color: CardColors.textColor, height: 2),
            ),
          ),
        ],
      ),
    );
  }
}

///vital data Tile
// ignore: must_be_immutable
class VitalDataTile extends StatelessWidget {
  var value;
  var index;
  final k;
  final type;
  final status;
  final unit;
  VitalDataTile({this.k, this.value, this.index, this.type, this.status, this.unit});

  @override
  Widget build(BuildContext context) {
    return Visibility(
      visible: value != null && value != 'N/A',
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // SizedBox(height: 10.0),
          Visibility(
            visible: value != null && value != 'N/A',
            child: Row(
              children: [
                Text(
                  '$type :',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: CardColors.titleColor,
                  ),
                ),
                Text(
                  unit != null && unit != 'N/A' ? '   $value' + ' $unit' : '   $value', // "N/A",
                  style: TextStyle(
                      color: CardColors.textColor, height: 2, fontSize: ScUtil().setSp(14)),
                ),
              ],
            ),
          ),

          Visibility(
            visible: status != null && status != 'N/A',
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Status :',
                  // '$index' + '. Bmi} :',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: CardColors.titleColor,
                  ),
                ),
                status.length < 20
                    ? Text(
                        '   $status', //?? "N/A",
                        style: TextStyle(
                          color: CardColors.textColor,
                        ), //height:2
                      )
                    : Container(
                        // color: Colors.red,
                        height: MediaQuery.of(context).size.height * 0.085,
                        width: MediaQuery.of(context).size.width * 0.6,
                        child: Flexible(
                          child: Text(
                            '   $status', //?? "N/A",
                            maxLines: 4,
                            textAlign: TextAlign.justify,
                            style: TextStyle(
                              color: CardColors.textColor,
                            ), //height:2
                          ),
                        ),
                      )
              ],
            ),
          ),
          SizedBox(
            height: 5,
          ),
        ],
      ),
    );
    // if (k.toString().toLowerCase() == 'bmi' ||
    //     k.toString().toLowerCase() == 'heightmeters' ||
    //     k.toString().toLowerCase() == 'weightkg') {
    //   double dbl = double.parse(value);
    //   value = dbl.toStringAsFixed(2);
    // }
    if (k.toString().toLowerCase() == 'datetime123') {
      var date = DateFormat("yyyy-MM-dd").parse(value);
      // date = DateFormat.yMMMd().format(date);
      print(date);
      value = date.toString().substring(0, 10);
    }
    // return Column(
    //   mainAxisAlignment: MainAxisAlignment.start,
    //   crossAxisAlignment: CrossAxisAlignment.start,
    //   children: [
    //     // SizedBox(height: 10.0),
    //     Row(children: [
    //       Text(
    //         '${camelize(k.toString())} :',
    //         // '$index' + '. Bmi} :',
    //         style: TextStyle(
    //           fontWeight: FontWeight.bold,
    //           color: CardColors.titleColor,
    //         ),
    //       ),
    //       Text(
    //         '   $value', //?? "N/A",
    //         style: TextStyle(color: CardColors.textColor, height: 2),
    //       ),
    //     ],
    //     ),
    //     // SizedBox(height: 10.0),
    //     // Text(
    //     //   'Daignosis Note:',
    //     //   style: TextStyle(
    //     //     fontWeight: FontWeight.bold,
    //     //     color: CardColors.titleColor,
    //     //   ),
    //     // ),
    //     // Text(
    //     //   value['diagnosis_note'], //?? "N/A",
    //     //   style: TextStyle(color: CardColors.textColor, height: 2),
    //     // ),
    //   ],
    // );
  }
}

Widget popup() {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    mainAxisSize: MainAxisSize.min,
    children: [
      Padding(
        padding: const EdgeInsets.all(8.0),
        child: Text(
          'Share prescription ?',
          style: TextStyle(
              color: AppColors.appTextColor, //AppColors.primaryColor
              fontSize: 24,
              fontWeight: FontWeight.bold),
          textAlign: TextAlign.left,
        ),
      ),
      Divider(
        indent: 10,
        endIndent: 10,
        thickness: 2,
      ),
      Padding(
        padding: const EdgeInsets.all(10.0),
        child: RichText(
          textAlign: TextAlign.left,
          text: TextSpan(
            text:
                "By providing your consent to India Health Link Pvt. Ltd (IHL) to share your prescription and personal contact details to 1mg Technology Pvt Ltd in your own interest for your medicine order fulfillment as per the ",
            style: TextStyle(
                color: AppColors.appTextColor, //AppColors.primaryColor
                fontSize: 14),
            children: [
              TextSpan(
                text: "Terms & Conditions",
                style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.blue,
                    decoration: TextDecoration.underline),
                recognizer: TapGestureRecognizer()..onTap = () {},
              ),
              TextSpan(text: " and "),
              TextSpan(
                text: "Privacy Policy",
                style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.blue,
                    decoration: TextDecoration.underline),
                recognizer: TapGestureRecognizer()..onTap = () {},
              ),
              TextSpan(
                text: " to avail the 'Order Medicines' services.",
                style: TextStyle(
                    color: AppColors.appTextColor, //AppColors.primaryColor
                    fontSize: 14),
              ),
            ],
          ),
        ),
      ),
      CheckboxListTile(
        controlAffinity: ListTileControlAffinity.leading,
        value: false,
        onChanged: (val) {},

        title: Text(
          'I agree to the Terms and Condition for the service',
          style: TextStyle(color: AppColors.appTextColor, fontSize: 12),
        ),
        // isThreeLine: false,
        contentPadding: EdgeInsets.only(left: 16),
      ),
    ],
  );
}

//lab order tile class
// ignore: must_be_immutable
class LabOrderTile extends StatelessWidget {
  Map value;
  var index;
  bool showNotesOfLabTests;
  LabOrderTile({Key key, this.value, this.index, this.showNotesOfLabTests}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SizedBox(height: ScUtil().setHeight(showNotesOfLabTests ? 0.1 : 3)),
        // Text(
        //   '$index' ,
        //   style: TextStyle(
        //     fontWeight: FontWeight.bold,
        //     color: CardColors.titleColor,
        //   ),
        // ),
        showNotesOfLabTests
            ? Text(
                value["lab_note"].toString() != 'null' && value['lab_note'].toString() != ''
                    ? '$index. ' + value["lab_note"] //?? "N/A",
                    : '$index. ' + 'N/A',
                style: TextStyle(color: CardColors.textColor, height: 1.2),
              )
            : Text(
                '$index. ' + value["test_name"], //?? "N/A",
                style: TextStyle(color: CardColors.textColor, height: 1.2),
              ),
        // SizedBox(height: 10.0),
        // // Text(
        // //   'Prescribed On:',
        // //   style: TextStyle(
        // //     fontWeight: FontWeight.bold,
        // //     color: CardColors.titleColor,
        // //   ),
        // // ),
        // // Text(
        // //   value['test_prescribed_on'], //?? "N/A",
        // //   style: TextStyle(color: CardColors.textColor, height: 2),
        // // ),
        // Text(
        //   'Days:',
        //   style: TextStyle(
        //     fontWeight: FontWeight.bold,
        //     color: CardColors.titleColor,
        //   ),
        // ),
        // Text(
        //   value["days"], //?? "N/A",
        //   style: TextStyle(color: CardColors.textColor, height: 2),
        // ),
        // value["direction_of_use"] != null &&
        //         value["direction_of_use"] != "N/A" &&
        //         value["direction_of_use"] != ""
        //     ? Text(
        //         'Direction Of Use:',
        //         style: TextStyle(
        //           fontWeight: FontWeight.bold,
        //           color: CardColors.titleColor,
        //         ),
        //       )
        //     : Container(),
        // value["direction_of_use"] != null &&
        //         value["direction_of_use"] != "N/A" &&
        //         value["direction_of_use"] != ""
        //     ? Text(
        //         value["direction_of_use"], //?? "N/A",
        //         style: TextStyle(color: CardColors.textColor, height: 2),
        //       )
        //     : Container(),
      ],
    );
  }
}
